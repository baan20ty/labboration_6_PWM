
labb_6_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061e8  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08006328  08006328  00016328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080067ec  080067ec  000167ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080067f4  080067f4  000167f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080067f8  080067f8  000167f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000004  080067fc  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003f4  20000014  0800680c  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000408  0800680c  00020408  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018250  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c06  00000000  00000000  00038294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019a0  00000000  00000000  0003aea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018a8  00000000  00000000  0003c840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002295e  00000000  00000000  0003e0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015e8d  00000000  00000000  00060a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e23a7  00000000  00000000  000768d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00158c7a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007008  00000000  00000000  00158cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000014 	.word	0x20000014
 800015c:	00000000 	.word	0x00000000
 8000160:	08006310 	.word	0x08006310

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000018 	.word	0x20000018
 800017c:	08006310 	.word	0x08006310

08000180 <__aeabi_dmul>:
 8000180:	b570      	push	{r4, r5, r6, lr}
 8000182:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000186:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800018a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800018e:	bf1d      	ittte	ne
 8000190:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000194:	ea94 0f0c 	teqne	r4, ip
 8000198:	ea95 0f0c 	teqne	r5, ip
 800019c:	f000 f8de 	bleq	800035c <__aeabi_dmul+0x1dc>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea81 0603 	eor.w	r6, r1, r3
 80001a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001b2:	bf18      	it	ne
 80001b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001c0:	d038      	beq.n	8000234 <__aeabi_dmul+0xb4>
 80001c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001c6:	f04f 0500 	mov.w	r5, #0
 80001ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001d6:	f04f 0600 	mov.w	r6, #0
 80001da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001de:	f09c 0f00 	teq	ip, #0
 80001e2:	bf18      	it	ne
 80001e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001f4:	d204      	bcs.n	8000200 <__aeabi_dmul+0x80>
 80001f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001fa:	416d      	adcs	r5, r5
 80001fc:	eb46 0606 	adc.w	r6, r6, r6
 8000200:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000204:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000208:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800020c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000210:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000214:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000218:	bf88      	it	hi
 800021a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800021e:	d81e      	bhi.n	800025e <__aeabi_dmul+0xde>
 8000220:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000224:	bf08      	it	eq
 8000226:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800022a:	f150 0000 	adcs.w	r0, r0, #0
 800022e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000232:	bd70      	pop	{r4, r5, r6, pc}
 8000234:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000238:	ea46 0101 	orr.w	r1, r6, r1
 800023c:	ea40 0002 	orr.w	r0, r0, r2
 8000240:	ea81 0103 	eor.w	r1, r1, r3
 8000244:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000248:	bfc2      	ittt	gt
 800024a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800024e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000252:	bd70      	popgt	{r4, r5, r6, pc}
 8000254:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000258:	f04f 0e00 	mov.w	lr, #0
 800025c:	3c01      	subs	r4, #1
 800025e:	f300 80ab 	bgt.w	80003b8 <__aeabi_dmul+0x238>
 8000262:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000266:	bfde      	ittt	le
 8000268:	2000      	movle	r0, #0
 800026a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800026e:	bd70      	pople	{r4, r5, r6, pc}
 8000270:	f1c4 0400 	rsb	r4, r4, #0
 8000274:	3c20      	subs	r4, #32
 8000276:	da35      	bge.n	80002e4 <__aeabi_dmul+0x164>
 8000278:	340c      	adds	r4, #12
 800027a:	dc1b      	bgt.n	80002b4 <__aeabi_dmul+0x134>
 800027c:	f104 0414 	add.w	r4, r4, #20
 8000280:	f1c4 0520 	rsb	r5, r4, #32
 8000284:	fa00 f305 	lsl.w	r3, r0, r5
 8000288:	fa20 f004 	lsr.w	r0, r0, r4
 800028c:	fa01 f205 	lsl.w	r2, r1, r5
 8000290:	ea40 0002 	orr.w	r0, r0, r2
 8000294:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000298:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	fa21 f604 	lsr.w	r6, r1, r4
 80002a4:	eb42 0106 	adc.w	r1, r2, r6
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 040c 	rsb	r4, r4, #12
 80002b8:	f1c4 0520 	rsb	r5, r4, #32
 80002bc:	fa00 f304 	lsl.w	r3, r0, r4
 80002c0:	fa20 f005 	lsr.w	r0, r0, r5
 80002c4:	fa01 f204 	lsl.w	r2, r1, r4
 80002c8:	ea40 0002 	orr.w	r0, r0, r2
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002dc:	bf08      	it	eq
 80002de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f1c4 0520 	rsb	r5, r4, #32
 80002e8:	fa00 f205 	lsl.w	r2, r0, r5
 80002ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80002f0:	fa20 f304 	lsr.w	r3, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea43 0302 	orr.w	r3, r3, r2
 80002fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000300:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000304:	fa21 f204 	lsr.w	r2, r1, r4
 8000308:	ea20 0002 	bic.w	r0, r0, r2
 800030c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f094 0f00 	teq	r4, #0
 8000320:	d10f      	bne.n	8000342 <__aeabi_dmul+0x1c2>
 8000322:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000326:	0040      	lsls	r0, r0, #1
 8000328:	eb41 0101 	adc.w	r1, r1, r1
 800032c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3c01      	subeq	r4, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1a6>
 8000336:	ea41 0106 	orr.w	r1, r1, r6
 800033a:	f095 0f00 	teq	r5, #0
 800033e:	bf18      	it	ne
 8000340:	4770      	bxne	lr
 8000342:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000346:	0052      	lsls	r2, r2, #1
 8000348:	eb43 0303 	adc.w	r3, r3, r3
 800034c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000350:	bf08      	it	eq
 8000352:	3d01      	subeq	r5, #1
 8000354:	d0f7      	beq.n	8000346 <__aeabi_dmul+0x1c6>
 8000356:	ea43 0306 	orr.w	r3, r3, r6
 800035a:	4770      	bx	lr
 800035c:	ea94 0f0c 	teq	r4, ip
 8000360:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000364:	bf18      	it	ne
 8000366:	ea95 0f0c 	teqne	r5, ip
 800036a:	d00c      	beq.n	8000386 <__aeabi_dmul+0x206>
 800036c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000370:	bf18      	it	ne
 8000372:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000376:	d1d1      	bne.n	800031c <__aeabi_dmul+0x19c>
 8000378:	ea81 0103 	eor.w	r1, r1, r3
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	f04f 0000 	mov.w	r0, #0
 8000384:	bd70      	pop	{r4, r5, r6, pc}
 8000386:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800038a:	bf06      	itte	eq
 800038c:	4610      	moveq	r0, r2
 800038e:	4619      	moveq	r1, r3
 8000390:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000394:	d019      	beq.n	80003ca <__aeabi_dmul+0x24a>
 8000396:	ea94 0f0c 	teq	r4, ip
 800039a:	d102      	bne.n	80003a2 <__aeabi_dmul+0x222>
 800039c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003a0:	d113      	bne.n	80003ca <__aeabi_dmul+0x24a>
 80003a2:	ea95 0f0c 	teq	r5, ip
 80003a6:	d105      	bne.n	80003b4 <__aeabi_dmul+0x234>
 80003a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003ac:	bf1c      	itt	ne
 80003ae:	4610      	movne	r0, r2
 80003b0:	4619      	movne	r1, r3
 80003b2:	d10a      	bne.n	80003ca <__aeabi_dmul+0x24a>
 80003b4:	ea81 0103 	eor.w	r1, r1, r3
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd70      	pop	{r4, r5, r6, pc}
 80003ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003d2:	bd70      	pop	{r4, r5, r6, pc}

080003d4 <__aeabi_drsub>:
 80003d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	e002      	b.n	80003e0 <__adddf3>
 80003da:	bf00      	nop

080003dc <__aeabi_dsub>:
 80003dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003e0 <__adddf3>:
 80003e0:	b530      	push	{r4, r5, lr}
 80003e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	bf1f      	itttt	ne
 80003f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000402:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000406:	f000 80e2 	beq.w	80005ce <__adddf3+0x1ee>
 800040a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800040e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000412:	bfb8      	it	lt
 8000414:	426d      	neglt	r5, r5
 8000416:	dd0c      	ble.n	8000432 <__adddf3+0x52>
 8000418:	442c      	add	r4, r5
 800041a:	ea80 0202 	eor.w	r2, r0, r2
 800041e:	ea81 0303 	eor.w	r3, r1, r3
 8000422:	ea82 0000 	eor.w	r0, r2, r0
 8000426:	ea83 0101 	eor.w	r1, r3, r1
 800042a:	ea80 0202 	eor.w	r2, r0, r2
 800042e:	ea81 0303 	eor.w	r3, r1, r3
 8000432:	2d36      	cmp	r5, #54	; 0x36
 8000434:	bf88      	it	hi
 8000436:	bd30      	pophi	{r4, r5, pc}
 8000438:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800043c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000440:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000444:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x70>
 800044a:	4240      	negs	r0, r0
 800044c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000450:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000454:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000458:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800045c:	d002      	beq.n	8000464 <__adddf3+0x84>
 800045e:	4252      	negs	r2, r2
 8000460:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000464:	ea94 0f05 	teq	r4, r5
 8000468:	f000 80a7 	beq.w	80005ba <__adddf3+0x1da>
 800046c:	f1a4 0401 	sub.w	r4, r4, #1
 8000470:	f1d5 0e20 	rsbs	lr, r5, #32
 8000474:	db0d      	blt.n	8000492 <__adddf3+0xb2>
 8000476:	fa02 fc0e 	lsl.w	ip, r2, lr
 800047a:	fa22 f205 	lsr.w	r2, r2, r5
 800047e:	1880      	adds	r0, r0, r2
 8000480:	f141 0100 	adc.w	r1, r1, #0
 8000484:	fa03 f20e 	lsl.w	r2, r3, lr
 8000488:	1880      	adds	r0, r0, r2
 800048a:	fa43 f305 	asr.w	r3, r3, r5
 800048e:	4159      	adcs	r1, r3
 8000490:	e00e      	b.n	80004b0 <__adddf3+0xd0>
 8000492:	f1a5 0520 	sub.w	r5, r5, #32
 8000496:	f10e 0e20 	add.w	lr, lr, #32
 800049a:	2a01      	cmp	r2, #1
 800049c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004a0:	bf28      	it	cs
 80004a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004a6:	fa43 f305 	asr.w	r3, r3, r5
 80004aa:	18c0      	adds	r0, r0, r3
 80004ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b4:	d507      	bpl.n	80004c6 <__adddf3+0xe6>
 80004b6:	f04f 0e00 	mov.w	lr, #0
 80004ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80004be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004ca:	d31b      	bcc.n	8000504 <__adddf3+0x124>
 80004cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004d0:	d30c      	bcc.n	80004ec <__adddf3+0x10c>
 80004d2:	0849      	lsrs	r1, r1, #1
 80004d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004dc:	f104 0401 	add.w	r4, r4, #1
 80004e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004e8:	f080 809a 	bcs.w	8000620 <__adddf3+0x240>
 80004ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004f0:	bf08      	it	eq
 80004f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004f6:	f150 0000 	adcs.w	r0, r0, #0
 80004fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004fe:	ea41 0105 	orr.w	r1, r1, r5
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000508:	4140      	adcs	r0, r0
 800050a:	eb41 0101 	adc.w	r1, r1, r1
 800050e:	3c01      	subs	r4, #1
 8000510:	bf28      	it	cs
 8000512:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000516:	d2e9      	bcs.n	80004ec <__adddf3+0x10c>
 8000518:	f091 0f00 	teq	r1, #0
 800051c:	bf04      	itt	eq
 800051e:	4601      	moveq	r1, r0
 8000520:	2000      	moveq	r0, #0
 8000522:	fab1 f381 	clz	r3, r1
 8000526:	bf08      	it	eq
 8000528:	3320      	addeq	r3, #32
 800052a:	f1a3 030b 	sub.w	r3, r3, #11
 800052e:	f1b3 0220 	subs.w	r2, r3, #32
 8000532:	da0c      	bge.n	800054e <__adddf3+0x16e>
 8000534:	320c      	adds	r2, #12
 8000536:	dd08      	ble.n	800054a <__adddf3+0x16a>
 8000538:	f102 0c14 	add.w	ip, r2, #20
 800053c:	f1c2 020c 	rsb	r2, r2, #12
 8000540:	fa01 f00c 	lsl.w	r0, r1, ip
 8000544:	fa21 f102 	lsr.w	r1, r1, r2
 8000548:	e00c      	b.n	8000564 <__adddf3+0x184>
 800054a:	f102 0214 	add.w	r2, r2, #20
 800054e:	bfd8      	it	le
 8000550:	f1c2 0c20 	rsble	ip, r2, #32
 8000554:	fa01 f102 	lsl.w	r1, r1, r2
 8000558:	fa20 fc0c 	lsr.w	ip, r0, ip
 800055c:	bfdc      	itt	le
 800055e:	ea41 010c 	orrle.w	r1, r1, ip
 8000562:	4090      	lslle	r0, r2
 8000564:	1ae4      	subs	r4, r4, r3
 8000566:	bfa2      	ittt	ge
 8000568:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800056c:	4329      	orrge	r1, r5
 800056e:	bd30      	popge	{r4, r5, pc}
 8000570:	ea6f 0404 	mvn.w	r4, r4
 8000574:	3c1f      	subs	r4, #31
 8000576:	da1c      	bge.n	80005b2 <__adddf3+0x1d2>
 8000578:	340c      	adds	r4, #12
 800057a:	dc0e      	bgt.n	800059a <__adddf3+0x1ba>
 800057c:	f104 0414 	add.w	r4, r4, #20
 8000580:	f1c4 0220 	rsb	r2, r4, #32
 8000584:	fa20 f004 	lsr.w	r0, r0, r4
 8000588:	fa01 f302 	lsl.w	r3, r1, r2
 800058c:	ea40 0003 	orr.w	r0, r0, r3
 8000590:	fa21 f304 	lsr.w	r3, r1, r4
 8000594:	ea45 0103 	orr.w	r1, r5, r3
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f1c4 040c 	rsb	r4, r4, #12
 800059e:	f1c4 0220 	rsb	r2, r4, #32
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 f304 	lsl.w	r3, r1, r4
 80005aa:	ea40 0003 	orr.w	r0, r0, r3
 80005ae:	4629      	mov	r1, r5
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	fa21 f004 	lsr.w	r0, r1, r4
 80005b6:	4629      	mov	r1, r5
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	f094 0f00 	teq	r4, #0
 80005be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005c2:	bf06      	itte	eq
 80005c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005c8:	3401      	addeq	r4, #1
 80005ca:	3d01      	subne	r5, #1
 80005cc:	e74e      	b.n	800046c <__adddf3+0x8c>
 80005ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005d2:	bf18      	it	ne
 80005d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005d8:	d029      	beq.n	800062e <__adddf3+0x24e>
 80005da:	ea94 0f05 	teq	r4, r5
 80005de:	bf08      	it	eq
 80005e0:	ea90 0f02 	teqeq	r0, r2
 80005e4:	d005      	beq.n	80005f2 <__adddf3+0x212>
 80005e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ea:	bf04      	itt	eq
 80005ec:	4619      	moveq	r1, r3
 80005ee:	4610      	moveq	r0, r2
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf1e      	ittt	ne
 80005f8:	2100      	movne	r1, #0
 80005fa:	2000      	movne	r0, #0
 80005fc:	bd30      	popne	{r4, r5, pc}
 80005fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000602:	d105      	bne.n	8000610 <__adddf3+0x230>
 8000604:	0040      	lsls	r0, r0, #1
 8000606:	4149      	adcs	r1, r1
 8000608:	bf28      	it	cs
 800060a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800060e:	bd30      	pop	{r4, r5, pc}
 8000610:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000614:	bf3c      	itt	cc
 8000616:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800061a:	bd30      	popcc	{r4, r5, pc}
 800061c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000620:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000624:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf1a      	itte	ne
 8000634:	4619      	movne	r1, r3
 8000636:	4610      	movne	r0, r2
 8000638:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800063c:	bf1c      	itt	ne
 800063e:	460b      	movne	r3, r1
 8000640:	4602      	movne	r2, r0
 8000642:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000646:	bf06      	itte	eq
 8000648:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800064c:	ea91 0f03 	teqeq	r1, r3
 8000650:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000654:	bd30      	pop	{r4, r5, pc}
 8000656:	bf00      	nop

08000658 <__aeabi_ui2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f04f 0500 	mov.w	r5, #0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e750      	b.n	8000518 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_i2d>:
 8000678:	f090 0f00 	teq	r0, #0
 800067c:	bf04      	itt	eq
 800067e:	2100      	moveq	r1, #0
 8000680:	4770      	bxeq	lr
 8000682:	b530      	push	{r4, r5, lr}
 8000684:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000688:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800068c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000690:	bf48      	it	mi
 8000692:	4240      	negmi	r0, r0
 8000694:	f04f 0100 	mov.w	r1, #0
 8000698:	e73e      	b.n	8000518 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_f2d>:
 800069c:	0042      	lsls	r2, r0, #1
 800069e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006aa:	bf1f      	itttt	ne
 80006ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006b8:	4770      	bxne	lr
 80006ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006be:	bf08      	it	eq
 80006c0:	4770      	bxeq	lr
 80006c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006c6:	bf04      	itt	eq
 80006c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	e71c      	b.n	8000518 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_ul2d>:
 80006e0:	ea50 0201 	orrs.w	r2, r0, r1
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	f04f 0500 	mov.w	r5, #0
 80006ee:	e00a      	b.n	8000706 <__aeabi_l2d+0x16>

080006f0 <__aeabi_l2d>:
 80006f0:	ea50 0201 	orrs.w	r2, r0, r1
 80006f4:	bf08      	it	eq
 80006f6:	4770      	bxeq	lr
 80006f8:	b530      	push	{r4, r5, lr}
 80006fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006fe:	d502      	bpl.n	8000706 <__aeabi_l2d+0x16>
 8000700:	4240      	negs	r0, r0
 8000702:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000706:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800070a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800070e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000712:	f43f aed8 	beq.w	80004c6 <__adddf3+0xe6>
 8000716:	f04f 0203 	mov.w	r2, #3
 800071a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071e:	bf18      	it	ne
 8000720:	3203      	addne	r2, #3
 8000722:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000726:	bf18      	it	ne
 8000728:	3203      	addne	r2, #3
 800072a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800072e:	f1c2 0320 	rsb	r3, r2, #32
 8000732:	fa00 fc03 	lsl.w	ip, r0, r3
 8000736:	fa20 f002 	lsr.w	r0, r0, r2
 800073a:	fa01 fe03 	lsl.w	lr, r1, r3
 800073e:	ea40 000e 	orr.w	r0, r0, lr
 8000742:	fa21 f102 	lsr.w	r1, r1, r2
 8000746:	4414      	add	r4, r2
 8000748:	e6bd      	b.n	80004c6 <__adddf3+0xe6>
 800074a:	bf00      	nop

0800074c <__aeabi_d2uiz>:
 800074c:	004a      	lsls	r2, r1, #1
 800074e:	d211      	bcs.n	8000774 <__aeabi_d2uiz+0x28>
 8000750:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000754:	d211      	bcs.n	800077a <__aeabi_d2uiz+0x2e>
 8000756:	d50d      	bpl.n	8000774 <__aeabi_d2uiz+0x28>
 8000758:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800075c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000760:	d40e      	bmi.n	8000780 <__aeabi_d2uiz+0x34>
 8000762:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000766:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800076a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800076e:	fa23 f002 	lsr.w	r0, r3, r2
 8000772:	4770      	bx	lr
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	4770      	bx	lr
 800077a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800077e:	d102      	bne.n	8000786 <__aeabi_d2uiz+0x3a>
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	4770      	bx	lr
 8000786:	f04f 0000 	mov.w	r0, #0
 800078a:	4770      	bx	lr

0800078c <__aeabi_d2f>:
 800078c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000790:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000794:	bf24      	itt	cs
 8000796:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800079a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800079e:	d90d      	bls.n	80007bc <__aeabi_d2f+0x30>
 80007a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007b4:	bf08      	it	eq
 80007b6:	f020 0001 	biceq.w	r0, r0, #1
 80007ba:	4770      	bx	lr
 80007bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c0:	d121      	bne.n	8000806 <__aeabi_d2f+0x7a>
 80007c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007c6:	bfbc      	itt	lt
 80007c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007cc:	4770      	bxlt	lr
 80007ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007d6:	f1c2 0218 	rsb	r2, r2, #24
 80007da:	f1c2 0c20 	rsb	ip, r2, #32
 80007de:	fa10 f30c 	lsls.w	r3, r0, ip
 80007e2:	fa20 f002 	lsr.w	r0, r0, r2
 80007e6:	bf18      	it	ne
 80007e8:	f040 0001 	orrne.w	r0, r0, #1
 80007ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007f8:	ea40 000c 	orr.w	r0, r0, ip
 80007fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000800:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000804:	e7cc      	b.n	80007a0 <__aeabi_d2f+0x14>
 8000806:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800080a:	d107      	bne.n	800081c <__aeabi_d2f+0x90>
 800080c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000810:	bf1e      	ittt	ne
 8000812:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000816:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800081a:	4770      	bxne	lr
 800081c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000820:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000824:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop

0800082c <__aeabi_uldivmod>:
 800082c:	b953      	cbnz	r3, 8000844 <__aeabi_uldivmod+0x18>
 800082e:	b94a      	cbnz	r2, 8000844 <__aeabi_uldivmod+0x18>
 8000830:	2900      	cmp	r1, #0
 8000832:	bf08      	it	eq
 8000834:	2800      	cmpeq	r0, #0
 8000836:	bf1c      	itt	ne
 8000838:	f04f 31ff 	movne.w	r1, #4294967295
 800083c:	f04f 30ff 	movne.w	r0, #4294967295
 8000840:	f000 b96e 	b.w	8000b20 <__aeabi_idiv0>
 8000844:	f1ad 0c08 	sub.w	ip, sp, #8
 8000848:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800084c:	f000 f806 	bl	800085c <__udivmoddi4>
 8000850:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000854:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000858:	b004      	add	sp, #16
 800085a:	4770      	bx	lr

0800085c <__udivmoddi4>:
 800085c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000860:	9d08      	ldr	r5, [sp, #32]
 8000862:	4604      	mov	r4, r0
 8000864:	468c      	mov	ip, r1
 8000866:	2b00      	cmp	r3, #0
 8000868:	f040 8083 	bne.w	8000972 <__udivmoddi4+0x116>
 800086c:	428a      	cmp	r2, r1
 800086e:	4617      	mov	r7, r2
 8000870:	d947      	bls.n	8000902 <__udivmoddi4+0xa6>
 8000872:	fab2 f282 	clz	r2, r2
 8000876:	b142      	cbz	r2, 800088a <__udivmoddi4+0x2e>
 8000878:	f1c2 0020 	rsb	r0, r2, #32
 800087c:	fa24 f000 	lsr.w	r0, r4, r0
 8000880:	4091      	lsls	r1, r2
 8000882:	4097      	lsls	r7, r2
 8000884:	ea40 0c01 	orr.w	ip, r0, r1
 8000888:	4094      	lsls	r4, r2
 800088a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800088e:	0c23      	lsrs	r3, r4, #16
 8000890:	fbbc f6f8 	udiv	r6, ip, r8
 8000894:	fa1f fe87 	uxth.w	lr, r7
 8000898:	fb08 c116 	mls	r1, r8, r6, ip
 800089c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a0:	fb06 f10e 	mul.w	r1, r6, lr
 80008a4:	4299      	cmp	r1, r3
 80008a6:	d909      	bls.n	80008bc <__udivmoddi4+0x60>
 80008a8:	18fb      	adds	r3, r7, r3
 80008aa:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ae:	f080 8119 	bcs.w	8000ae4 <__udivmoddi4+0x288>
 80008b2:	4299      	cmp	r1, r3
 80008b4:	f240 8116 	bls.w	8000ae4 <__udivmoddi4+0x288>
 80008b8:	3e02      	subs	r6, #2
 80008ba:	443b      	add	r3, r7
 80008bc:	1a5b      	subs	r3, r3, r1
 80008be:	b2a4      	uxth	r4, r4
 80008c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80008c4:	fb08 3310 	mls	r3, r8, r0, r3
 80008c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d0:	45a6      	cmp	lr, r4
 80008d2:	d909      	bls.n	80008e8 <__udivmoddi4+0x8c>
 80008d4:	193c      	adds	r4, r7, r4
 80008d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008da:	f080 8105 	bcs.w	8000ae8 <__udivmoddi4+0x28c>
 80008de:	45a6      	cmp	lr, r4
 80008e0:	f240 8102 	bls.w	8000ae8 <__udivmoddi4+0x28c>
 80008e4:	3802      	subs	r0, #2
 80008e6:	443c      	add	r4, r7
 80008e8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008ec:	eba4 040e 	sub.w	r4, r4, lr
 80008f0:	2600      	movs	r6, #0
 80008f2:	b11d      	cbz	r5, 80008fc <__udivmoddi4+0xa0>
 80008f4:	40d4      	lsrs	r4, r2
 80008f6:	2300      	movs	r3, #0
 80008f8:	e9c5 4300 	strd	r4, r3, [r5]
 80008fc:	4631      	mov	r1, r6
 80008fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000902:	b902      	cbnz	r2, 8000906 <__udivmoddi4+0xaa>
 8000904:	deff      	udf	#255	; 0xff
 8000906:	fab2 f282 	clz	r2, r2
 800090a:	2a00      	cmp	r2, #0
 800090c:	d150      	bne.n	80009b0 <__udivmoddi4+0x154>
 800090e:	1bcb      	subs	r3, r1, r7
 8000910:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000914:	fa1f f887 	uxth.w	r8, r7
 8000918:	2601      	movs	r6, #1
 800091a:	fbb3 fcfe 	udiv	ip, r3, lr
 800091e:	0c21      	lsrs	r1, r4, #16
 8000920:	fb0e 331c 	mls	r3, lr, ip, r3
 8000924:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000928:	fb08 f30c 	mul.w	r3, r8, ip
 800092c:	428b      	cmp	r3, r1
 800092e:	d907      	bls.n	8000940 <__udivmoddi4+0xe4>
 8000930:	1879      	adds	r1, r7, r1
 8000932:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0xe2>
 8000938:	428b      	cmp	r3, r1
 800093a:	f200 80e9 	bhi.w	8000b10 <__udivmoddi4+0x2b4>
 800093e:	4684      	mov	ip, r0
 8000940:	1ac9      	subs	r1, r1, r3
 8000942:	b2a3      	uxth	r3, r4
 8000944:	fbb1 f0fe 	udiv	r0, r1, lr
 8000948:	fb0e 1110 	mls	r1, lr, r0, r1
 800094c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000950:	fb08 f800 	mul.w	r8, r8, r0
 8000954:	45a0      	cmp	r8, r4
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0x10c>
 8000958:	193c      	adds	r4, r7, r4
 800095a:	f100 33ff 	add.w	r3, r0, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0x10a>
 8000960:	45a0      	cmp	r8, r4
 8000962:	f200 80d9 	bhi.w	8000b18 <__udivmoddi4+0x2bc>
 8000966:	4618      	mov	r0, r3
 8000968:	eba4 0408 	sub.w	r4, r4, r8
 800096c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000970:	e7bf      	b.n	80008f2 <__udivmoddi4+0x96>
 8000972:	428b      	cmp	r3, r1
 8000974:	d909      	bls.n	800098a <__udivmoddi4+0x12e>
 8000976:	2d00      	cmp	r5, #0
 8000978:	f000 80b1 	beq.w	8000ade <__udivmoddi4+0x282>
 800097c:	2600      	movs	r6, #0
 800097e:	e9c5 0100 	strd	r0, r1, [r5]
 8000982:	4630      	mov	r0, r6
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	fab3 f683 	clz	r6, r3
 800098e:	2e00      	cmp	r6, #0
 8000990:	d14a      	bne.n	8000a28 <__udivmoddi4+0x1cc>
 8000992:	428b      	cmp	r3, r1
 8000994:	d302      	bcc.n	800099c <__udivmoddi4+0x140>
 8000996:	4282      	cmp	r2, r0
 8000998:	f200 80b8 	bhi.w	8000b0c <__udivmoddi4+0x2b0>
 800099c:	1a84      	subs	r4, r0, r2
 800099e:	eb61 0103 	sbc.w	r1, r1, r3
 80009a2:	2001      	movs	r0, #1
 80009a4:	468c      	mov	ip, r1
 80009a6:	2d00      	cmp	r5, #0
 80009a8:	d0a8      	beq.n	80008fc <__udivmoddi4+0xa0>
 80009aa:	e9c5 4c00 	strd	r4, ip, [r5]
 80009ae:	e7a5      	b.n	80008fc <__udivmoddi4+0xa0>
 80009b0:	f1c2 0320 	rsb	r3, r2, #32
 80009b4:	fa20 f603 	lsr.w	r6, r0, r3
 80009b8:	4097      	lsls	r7, r2
 80009ba:	fa01 f002 	lsl.w	r0, r1, r2
 80009be:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009c2:	40d9      	lsrs	r1, r3
 80009c4:	4330      	orrs	r0, r6
 80009c6:	0c03      	lsrs	r3, r0, #16
 80009c8:	fbb1 f6fe 	udiv	r6, r1, lr
 80009cc:	fa1f f887 	uxth.w	r8, r7
 80009d0:	fb0e 1116 	mls	r1, lr, r6, r1
 80009d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009d8:	fb06 f108 	mul.w	r1, r6, r8
 80009dc:	4299      	cmp	r1, r3
 80009de:	fa04 f402 	lsl.w	r4, r4, r2
 80009e2:	d909      	bls.n	80009f8 <__udivmoddi4+0x19c>
 80009e4:	18fb      	adds	r3, r7, r3
 80009e6:	f106 3cff 	add.w	ip, r6, #4294967295
 80009ea:	f080 808d 	bcs.w	8000b08 <__udivmoddi4+0x2ac>
 80009ee:	4299      	cmp	r1, r3
 80009f0:	f240 808a 	bls.w	8000b08 <__udivmoddi4+0x2ac>
 80009f4:	3e02      	subs	r6, #2
 80009f6:	443b      	add	r3, r7
 80009f8:	1a5b      	subs	r3, r3, r1
 80009fa:	b281      	uxth	r1, r0
 80009fc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a08:	fb00 f308 	mul.w	r3, r0, r8
 8000a0c:	428b      	cmp	r3, r1
 8000a0e:	d907      	bls.n	8000a20 <__udivmoddi4+0x1c4>
 8000a10:	1879      	adds	r1, r7, r1
 8000a12:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a16:	d273      	bcs.n	8000b00 <__udivmoddi4+0x2a4>
 8000a18:	428b      	cmp	r3, r1
 8000a1a:	d971      	bls.n	8000b00 <__udivmoddi4+0x2a4>
 8000a1c:	3802      	subs	r0, #2
 8000a1e:	4439      	add	r1, r7
 8000a20:	1acb      	subs	r3, r1, r3
 8000a22:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a26:	e778      	b.n	800091a <__udivmoddi4+0xbe>
 8000a28:	f1c6 0c20 	rsb	ip, r6, #32
 8000a2c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a30:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a34:	431c      	orrs	r4, r3
 8000a36:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a3e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a42:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a46:	431f      	orrs	r7, r3
 8000a48:	0c3b      	lsrs	r3, r7, #16
 8000a4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a4e:	fa1f f884 	uxth.w	r8, r4
 8000a52:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a56:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a5a:	fb09 fa08 	mul.w	sl, r9, r8
 8000a5e:	458a      	cmp	sl, r1
 8000a60:	fa02 f206 	lsl.w	r2, r2, r6
 8000a64:	fa00 f306 	lsl.w	r3, r0, r6
 8000a68:	d908      	bls.n	8000a7c <__udivmoddi4+0x220>
 8000a6a:	1861      	adds	r1, r4, r1
 8000a6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a70:	d248      	bcs.n	8000b04 <__udivmoddi4+0x2a8>
 8000a72:	458a      	cmp	sl, r1
 8000a74:	d946      	bls.n	8000b04 <__udivmoddi4+0x2a8>
 8000a76:	f1a9 0902 	sub.w	r9, r9, #2
 8000a7a:	4421      	add	r1, r4
 8000a7c:	eba1 010a 	sub.w	r1, r1, sl
 8000a80:	b2bf      	uxth	r7, r7
 8000a82:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a86:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a8a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a8e:	fb00 f808 	mul.w	r8, r0, r8
 8000a92:	45b8      	cmp	r8, r7
 8000a94:	d907      	bls.n	8000aa6 <__udivmoddi4+0x24a>
 8000a96:	19e7      	adds	r7, r4, r7
 8000a98:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a9c:	d22e      	bcs.n	8000afc <__udivmoddi4+0x2a0>
 8000a9e:	45b8      	cmp	r8, r7
 8000aa0:	d92c      	bls.n	8000afc <__udivmoddi4+0x2a0>
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	4427      	add	r7, r4
 8000aa6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000aaa:	eba7 0708 	sub.w	r7, r7, r8
 8000aae:	fba0 8902 	umull	r8, r9, r0, r2
 8000ab2:	454f      	cmp	r7, r9
 8000ab4:	46c6      	mov	lr, r8
 8000ab6:	4649      	mov	r1, r9
 8000ab8:	d31a      	bcc.n	8000af0 <__udivmoddi4+0x294>
 8000aba:	d017      	beq.n	8000aec <__udivmoddi4+0x290>
 8000abc:	b15d      	cbz	r5, 8000ad6 <__udivmoddi4+0x27a>
 8000abe:	ebb3 020e 	subs.w	r2, r3, lr
 8000ac2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ac6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000aca:	40f2      	lsrs	r2, r6
 8000acc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ad0:	40f7      	lsrs	r7, r6
 8000ad2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	462e      	mov	r6, r5
 8000ae0:	4628      	mov	r0, r5
 8000ae2:	e70b      	b.n	80008fc <__udivmoddi4+0xa0>
 8000ae4:	4606      	mov	r6, r0
 8000ae6:	e6e9      	b.n	80008bc <__udivmoddi4+0x60>
 8000ae8:	4618      	mov	r0, r3
 8000aea:	e6fd      	b.n	80008e8 <__udivmoddi4+0x8c>
 8000aec:	4543      	cmp	r3, r8
 8000aee:	d2e5      	bcs.n	8000abc <__udivmoddi4+0x260>
 8000af0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000af4:	eb69 0104 	sbc.w	r1, r9, r4
 8000af8:	3801      	subs	r0, #1
 8000afa:	e7df      	b.n	8000abc <__udivmoddi4+0x260>
 8000afc:	4608      	mov	r0, r1
 8000afe:	e7d2      	b.n	8000aa6 <__udivmoddi4+0x24a>
 8000b00:	4660      	mov	r0, ip
 8000b02:	e78d      	b.n	8000a20 <__udivmoddi4+0x1c4>
 8000b04:	4681      	mov	r9, r0
 8000b06:	e7b9      	b.n	8000a7c <__udivmoddi4+0x220>
 8000b08:	4666      	mov	r6, ip
 8000b0a:	e775      	b.n	80009f8 <__udivmoddi4+0x19c>
 8000b0c:	4630      	mov	r0, r6
 8000b0e:	e74a      	b.n	80009a6 <__udivmoddi4+0x14a>
 8000b10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b14:	4439      	add	r1, r7
 8000b16:	e713      	b.n	8000940 <__udivmoddi4+0xe4>
 8000b18:	3802      	subs	r0, #2
 8000b1a:	443c      	add	r4, r7
 8000b1c:	e724      	b.n	8000968 <__udivmoddi4+0x10c>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_idiv0>:
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b34:	f023 0218 	bic.w	r2, r3, #24
 8000b38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4013      	ands	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b74:	68fb      	ldr	r3, [r7, #12]
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b88:	f000 fd2c 	bl	80015e4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8c:	f000 f81a 	bl	8000bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b90:	f000 f9fc 	bl	8000f8c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b94:	f000 f984 	bl	8000ea0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000b98:	f000 f9d0 	bl	8000f3c <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000b9c:	f000 f8b8 	bl	8000d10 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <main+0x3c>)
 8000ba4:	f003 f850 	bl	8003c48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ba8:	2104      	movs	r1, #4
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <main+0x3c>)
 8000bac:	f003 f84c 	bl	8003c48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000bb0:	2108      	movs	r1, #8
 8000bb2:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <main+0x3c>)
 8000bb4:	f003 f848 	bl	8003c48 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8000bb8:	4801      	ldr	r0, [pc, #4]	; (8000bc0 <main+0x3c>)
 8000bba:	f002 ff95 	bl	8003ae8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <main+0x3a>
 8000bc0:	200000c4 	.word	0x200000c4

08000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b0ae      	sub	sp, #184	; 0xb8
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bce:	2248      	movs	r2, #72	; 0x48
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f004 fe28 	bl	8005828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
 8000be8:	615a      	str	r2, [r3, #20]
 8000bea:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2250      	movs	r2, #80	; 0x50
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f004 fe18 	bl	8005828 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c06:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	f023 0303 	bic.w	r3, r3, #3
 8000c12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c1c:	f001 f910 	bl	8001e40 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff ff7f 	bl	8000b24 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c26:	4b39      	ldr	r3, [pc, #228]	; (8000d0c <SystemClock_Config+0x148>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c2e:	4a37      	ldr	r2, [pc, #220]	; (8000d0c <SystemClock_Config+0x148>)
 8000c30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	4b35      	ldr	r3, [pc, #212]	; (8000d0c <SystemClock_Config+0x148>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000c42:	2327      	movs	r3, #39	; 0x27
 8000c44:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c4a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c54:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c56:	2301      	movs	r3, #1
 8000c58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c5c:	2340      	movs	r3, #64	; 0x40
 8000c5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c68:	2360      	movs	r3, #96	; 0x60
 8000c6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c74:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f001 fc75 	bl	8002568 <HAL_RCC_OscConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c84:	f000 faf0 	bl	8001268 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000c88:	236f      	movs	r3, #111	; 0x6f
 8000c8a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ca4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ca8:	2101      	movs	r1, #1
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 ffe8 	bl	8002c80 <HAL_RCC_ClockConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000cb6:	f000 fad7 	bl	8001268 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 8000cba:	f242 1301 	movw	r3, #8449	; 0x2101
 8000cbe:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000cc0:	2318      	movs	r3, #24
 8000cc2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000cc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cc8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000cca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cce:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000cd0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000cd4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000cd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cda:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000ce0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f002 fc15 	bl	8003520 <HAL_RCCEx_PeriphCLKConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8000cfc:	f000 fab4 	bl	8001268 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000d00:	f002 fd84 	bl	800380c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000d04:	bf00      	nop
 8000d06:	37b8      	adds	r7, #184	; 0xb8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	58000400 	.word	0x58000400

08000d10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b09c      	sub	sp, #112	; 0x70
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
 8000d40:	615a      	str	r2, [r3, #20]
 8000d42:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2234      	movs	r2, #52	; 0x34
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f004 fd6c 	bl	8005828 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d50:	4b51      	ldr	r3, [pc, #324]	; (8000e98 <MX_TIM1_Init+0x188>)
 8000d52:	4a52      	ldr	r2, [pc, #328]	; (8000e9c <MX_TIM1_Init+0x18c>)
 8000d54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d56:	4b50      	ldr	r3, [pc, #320]	; (8000e98 <MX_TIM1_Init+0x188>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5c:	4b4e      	ldr	r3, [pc, #312]	; (8000e98 <MX_TIM1_Init+0x188>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d62:	4b4d      	ldr	r3, [pc, #308]	; (8000e98 <MX_TIM1_Init+0x188>)
 8000d64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6a:	4b4b      	ldr	r3, [pc, #300]	; (8000e98 <MX_TIM1_Init+0x188>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d70:	4b49      	ldr	r3, [pc, #292]	; (8000e98 <MX_TIM1_Init+0x188>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d76:	4b48      	ldr	r3, [pc, #288]	; (8000e98 <MX_TIM1_Init+0x188>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d7c:	4846      	ldr	r0, [pc, #280]	; (8000e98 <MX_TIM1_Init+0x188>)
 8000d7e:	f002 fe5c 	bl	8003a3a <HAL_TIM_Base_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000d88:	f000 fa6e 	bl	8001268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d90:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d92:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000d96:	4619      	mov	r1, r3
 8000d98:	483f      	ldr	r0, [pc, #252]	; (8000e98 <MX_TIM1_Init+0x188>)
 8000d9a:	f003 fa5f 	bl	800425c <HAL_TIM_ConfigClockSource>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000da4:	f000 fa60 	bl	8001268 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000da8:	483b      	ldr	r0, [pc, #236]	; (8000e98 <MX_TIM1_Init+0x188>)
 8000daa:	f002 feeb 	bl	8003b84 <HAL_TIM_PWM_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000db4:	f000 fa58 	bl	8001268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db8:	2300      	movs	r3, #0
 8000dba:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4833      	ldr	r0, [pc, #204]	; (8000e98 <MX_TIM1_Init+0x188>)
 8000dcc:	f003 fed8 	bl	8004b80 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000dd6:	f000 fa47 	bl	8001268 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dda:	2360      	movs	r3, #96	; 0x60
 8000ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de2:	2300      	movs	r3, #0
 8000de4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000de6:	2300      	movs	r3, #0
 8000de8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4826      	ldr	r0, [pc, #152]	; (8000e98 <MX_TIM1_Init+0x188>)
 8000e00:	f003 f91c 	bl	800403c <HAL_TIM_PWM_ConfigChannel>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000e0a:	f000 fa2d 	bl	8001268 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e12:	2204      	movs	r2, #4
 8000e14:	4619      	mov	r1, r3
 8000e16:	4820      	ldr	r0, [pc, #128]	; (8000e98 <MX_TIM1_Init+0x188>)
 8000e18:	f003 f910 	bl	800403c <HAL_TIM_PWM_ConfigChannel>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000e22:	f000 fa21 	bl	8001268 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e2a:	2208      	movs	r2, #8
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	481a      	ldr	r0, [pc, #104]	; (8000e98 <MX_TIM1_Init+0x188>)
 8000e30:	f003 f904 	bl	800403c <HAL_TIM_PWM_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000e3a:	f000 fa15 	bl	8001268 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4807      	ldr	r0, [pc, #28]	; (8000e98 <MX_TIM1_Init+0x188>)
 8000e7c:	f003 fee0 	bl	8004c40 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000e86:	f000 f9ef 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e8a:	4803      	ldr	r0, [pc, #12]	; (8000e98 <MX_TIM1_Init+0x188>)
 8000e8c:	f000 fa60 	bl	8001350 <HAL_TIM_MspPostInit>

}
 8000e90:	bf00      	nop
 8000e92:	3770      	adds	r7, #112	; 0x70
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	200000c4 	.word	0x200000c4
 8000e9c:	40012c00 	.word	0x40012c00

08000ea0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ea4:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <MX_USART1_UART_Init+0x94>)
 8000ea6:	4a24      	ldr	r2, [pc, #144]	; (8000f38 <MX_USART1_UART_Init+0x98>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eaa:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <MX_USART1_UART_Init+0x94>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000eb2:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <MX_USART1_UART_Init+0x94>)
 8000eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000eb8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000eba:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <MX_USART1_UART_Init+0x94>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <MX_USART1_UART_Init+0x94>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <MX_USART1_UART_Init+0x94>)
 8000ec8:	220c      	movs	r2, #12
 8000eca:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ecc:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_USART1_UART_Init+0x94>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <MX_USART1_UART_Init+0x94>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <MX_USART1_UART_Init+0x94>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_USART1_UART_Init+0x94>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <MX_USART1_UART_Init+0x94>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eea:	4812      	ldr	r0, [pc, #72]	; (8000f34 <MX_USART1_UART_Init+0x94>)
 8000eec:	f003 ff76 	bl	8004ddc <HAL_UART_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000ef6:	f000 f9b7 	bl	8001268 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000efa:	2100      	movs	r1, #0
 8000efc:	480d      	ldr	r0, [pc, #52]	; (8000f34 <MX_USART1_UART_Init+0x94>)
 8000efe:	f004 fb69 	bl	80055d4 <HAL_UARTEx_SetTxFifoThreshold>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000f08:	f000 f9ae 	bl	8001268 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4809      	ldr	r0, [pc, #36]	; (8000f34 <MX_USART1_UART_Init+0x94>)
 8000f10:	f004 fb9e 	bl	8005650 <HAL_UARTEx_SetRxFifoThreshold>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000f1a:	f000 f9a5 	bl	8001268 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_USART1_UART_Init+0x94>)
 8000f20:	f004 fb1f 	bl	8005562 <HAL_UARTEx_DisableFifoMode>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000f2a:	f000 f99d 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000034 	.word	0x20000034
 8000f38:	40013800 	.word	0x40013800

08000f3c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000f40:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <MX_USB_PCD_Init+0x48>)
 8000f42:	4a11      	ldr	r2, [pc, #68]	; (8000f88 <MX_USB_PCD_Init+0x4c>)
 8000f44:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_USB_PCD_Init+0x48>)
 8000f48:	2208      	movs	r2, #8
 8000f4a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <MX_USB_PCD_Init+0x48>)
 8000f4e:	2202      	movs	r2, #2
 8000f50:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_USB_PCD_Init+0x48>)
 8000f54:	2202      	movs	r2, #2
 8000f56:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <MX_USB_PCD_Init+0x48>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_USB_PCD_Init+0x48>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <MX_USB_PCD_Init+0x48>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_USB_PCD_Init+0x48>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <MX_USB_PCD_Init+0x48>)
 8000f72:	f000 fe55 	bl	8001c20 <HAL_PCD_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000f7c:	f000 f974 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000110 	.word	0x20000110
 8000f88:	40006800 	.word	0x40006800

08000f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa0:	2004      	movs	r0, #4
 8000fa2:	f7ff fdd5 	bl	8000b50 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f7ff fdd2 	bl	8000b50 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fac:	2002      	movs	r0, #2
 8000fae:	f7ff fdcf 	bl	8000b50 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb2:	2008      	movs	r0, #8
 8000fb4:	f7ff fdcc 	bl	8000b50 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2123      	movs	r1, #35	; 0x23
 8000fbc:	4814      	ldr	r0, [pc, #80]	; (8001010 <MX_GPIO_Init+0x84>)
 8000fbe:	f000 fe17 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fc2:	2310      	movs	r3, #16
 8000fc4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4810      	ldr	r0, [pc, #64]	; (8001014 <MX_GPIO_Init+0x88>)
 8000fd4:	f000 fc9c 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000fd8:	2323      	movs	r3, #35	; 0x23
 8000fda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	4808      	ldr	r0, [pc, #32]	; (8001010 <MX_GPIO_Init+0x84>)
 8000fee:	f000 fc8f 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	4619      	mov	r1, r3
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_GPIO_Init+0x8c>)
 8001004:	f000 fc84 	bl	8001910 <HAL_GPIO_Init>

}
 8001008:	bf00      	nop
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	48000400 	.word	0x48000400
 8001014:	48000800 	.word	0x48000800
 8001018:	48000c00 	.word	0x48000c00
 800101c:	00000000 	.word	0x00000000

08001020 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1){
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a88      	ldr	r2, [pc, #544]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800102e:	4293      	cmp	r3, r2
 8001030:	f040 80f8 	bne.w	8001224 <HAL_TIM_PeriodElapsedCallback+0x204>

		static float time = 0;
		uint16_t value_red = (uint16_t)((sinf(2*M_PI*time*frekvens+0*(2*M_PI/3))+1.0)*500.0);
 8001034:	4b87      	ldr	r3, [pc, #540]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fb2f 	bl	800069c <__aeabi_f2d>
 800103e:	a37c      	add	r3, pc, #496	; (adr r3, 8001230 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001044:	f7ff f89c 	bl	8000180 <__aeabi_dmul>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4614      	mov	r4, r2
 800104e:	461d      	mov	r5, r3
 8001050:	4b81      	ldr	r3, [pc, #516]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fb21 	bl	800069c <__aeabi_f2d>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4620      	mov	r0, r4
 8001060:	4629      	mov	r1, r5
 8001062:	f7ff f88d 	bl	8000180 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	f7ff f9b3 	bl	80003e0 <__adddf3>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fb83 	bl	800078c <__aeabi_d2f>
 8001086:	4603      	mov	r3, r0
 8001088:	ee00 3a10 	vmov	s0, r3
 800108c:	f004 fbd4 	bl	8005838 <sinf>
 8001090:	ee10 3a10 	vmov	r3, s0
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fb01 	bl	800069c <__aeabi_f2d>
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b6f      	ldr	r3, [pc, #444]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80010a0:	f7ff f99e 	bl	80003e0 <__adddf3>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	4b6b      	ldr	r3, [pc, #428]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80010b2:	f7ff f865 	bl	8000180 <__aeabi_dmul>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fb45 	bl	800074c <__aeabi_d2uiz>
 80010c2:	4603      	mov	r3, r0
 80010c4:	81fb      	strh	r3, [r7, #14]
		uint16_t value_green = (uint16_t)((sinf(2*M_PI*time*frekvens+1*(2*M_PI/3))+1.0)*500.0);
 80010c6:	4b63      	ldr	r3, [pc, #396]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fae6 	bl	800069c <__aeabi_f2d>
 80010d0:	a357      	add	r3, pc, #348	; (adr r3, 8001230 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80010d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d6:	f7ff f853 	bl	8000180 <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4614      	mov	r4, r2
 80010e0:	461d      	mov	r5, r3
 80010e2:	4b5d      	ldr	r3, [pc, #372]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fad8 	bl	800069c <__aeabi_f2d>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4620      	mov	r0, r4
 80010f2:	4629      	mov	r1, r5
 80010f4:	f7ff f844 	bl	8000180 <__aeabi_dmul>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	a34d      	add	r3, pc, #308	; (adr r3, 8001238 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff f96b 	bl	80003e0 <__adddf3>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fb3b 	bl	800078c <__aeabi_d2f>
 8001116:	4603      	mov	r3, r0
 8001118:	ee00 3a10 	vmov	s0, r3
 800111c:	f004 fb8c 	bl	8005838 <sinf>
 8001120:	ee10 3a10 	vmov	r3, s0
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fab9 	bl	800069c <__aeabi_f2d>
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	4b4b      	ldr	r3, [pc, #300]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001130:	f7ff f956 	bl	80003e0 <__adddf3>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	4b47      	ldr	r3, [pc, #284]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001142:	f7ff f81d 	bl	8000180 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fafd 	bl	800074c <__aeabi_d2uiz>
 8001152:	4603      	mov	r3, r0
 8001154:	81bb      	strh	r3, [r7, #12]
		uint16_t value_blue = (uint16_t)((sinf(2*M_PI*time*frekvens+2*(2*M_PI/3))+1.0)*500.0);
 8001156:	4b3f      	ldr	r3, [pc, #252]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fa9e 	bl	800069c <__aeabi_f2d>
 8001160:	a333      	add	r3, pc, #204	; (adr r3, 8001230 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7ff f80b 	bl	8000180 <__aeabi_dmul>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4614      	mov	r4, r2
 8001170:	461d      	mov	r5, r3
 8001172:	4b39      	ldr	r3, [pc, #228]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fa90 	bl	800069c <__aeabi_f2d>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4620      	mov	r0, r4
 8001182:	4629      	mov	r1, r5
 8001184:	f7fe fffc 	bl	8000180 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	a32b      	add	r3, pc, #172	; (adr r3, 8001240 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff f923 	bl	80003e0 <__adddf3>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f7ff faf3 	bl	800078c <__aeabi_d2f>
 80011a6:	4603      	mov	r3, r0
 80011a8:	ee00 3a10 	vmov	s0, r3
 80011ac:	f004 fb44 	bl	8005838 <sinf>
 80011b0:	ee10 3a10 	vmov	r3, s0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fa71 	bl	800069c <__aeabi_f2d>
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	4b27      	ldr	r3, [pc, #156]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80011c0:	f7ff f90e 	bl	80003e0 <__adddf3>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80011d2:	f7fe ffd5 	bl	8000180 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	f7ff fab5 	bl	800074c <__aeabi_d2uiz>
 80011e2:	4603      	mov	r3, r0
 80011e4:	817b      	strh	r3, [r7, #10]
		time +=0.001;
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fa56 	bl	800069c <__aeabi_f2d>
 80011f0:	a315      	add	r3, pc, #84	; (adr r3, 8001248 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f6:	f7ff f8f3 	bl	80003e0 <__adddf3>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f7ff fac3 	bl	800078c <__aeabi_d2f>
 8001206:	4603      	mov	r3, r0
 8001208:	4a12      	ldr	r2, [pc, #72]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800120a:	6013      	str	r3, [r2, #0]

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, value_red);
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	89fa      	ldrh	r2, [r7, #14]
 8001212:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, value_green);
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	89ba      	ldrh	r2, [r7, #12]
 800121a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, value_blue);
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	897a      	ldrh	r2, [r7, #10]
 8001222:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bdb0      	pop	{r4, r5, r7, pc}
 800122c:	f3af 8000 	nop.w
 8001230:	54442d18 	.word	0x54442d18
 8001234:	401921fb 	.word	0x401921fb
 8001238:	382d7365 	.word	0x382d7365
 800123c:	4000c152 	.word	0x4000c152
 8001240:	382d7365 	.word	0x382d7365
 8001244:	4010c152 	.word	0x4010c152
 8001248:	d2f1a9fc 	.word	0xd2f1a9fc
 800124c:	3f50624d 	.word	0x3f50624d
 8001250:	40012c00 	.word	0x40012c00
 8001254:	20000030 	.word	0x20000030
 8001258:	20000004 	.word	0x20000004
 800125c:	3ff00000 	.word	0x3ff00000
 8001260:	407f4000 	.word	0x407f4000
 8001264:	200000c4 	.word	0x200000c4

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	e7fe      	b.n	8001270 <Error_Handler+0x8>

08001272 <LL_AHB2_GRP1_EnableClock>:
{
 8001272:	b480      	push	{r7}
 8001274:	b085      	sub	sp, #20
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800127a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001280:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4313      	orrs	r3, r2
 8001288:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800128a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4013      	ands	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001296:	68fb      	ldr	r3, [r7, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80012ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80012bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4013      	ands	r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012c8:	68fb      	ldr	r3, [r7, #12]
}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b085      	sub	sp, #20
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80012de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80012ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4013      	ands	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012fa:	68fb      	ldr	r3, [r7, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a09      	ldr	r2, [pc, #36]	; (800134c <HAL_TIM_Base_MspInit+0x34>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10b      	bne.n	8001342 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800132a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800132e:	f7ff ffd2 	bl	80012d6 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	2019      	movs	r0, #25
 8001338:	f000 fab5 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800133c:	2019      	movs	r0, #25
 800133e:	f000 facc 	bl	80018da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40012c00 	.word	0x40012c00

08001350 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <HAL_TIM_MspPostInit+0x54>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d114      	bne.n	800139c <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	2001      	movs	r0, #1
 8001374:	f7ff ff7d 	bl	8001272 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = RGB_R_Pin|RGB_G_Pin|RGB_B_Pin;
 8001378:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800137c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800138a:	2301      	movs	r3, #1
 800138c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4619      	mov	r1, r3
 8001394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001398:	f000 faba 	bl	8001910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800139c:	bf00      	nop
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40012c00 	.word	0x40012c00

080013a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <HAL_UART_MspInit+0x58>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d116      	bne.n	80013f8 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013ce:	f7ff ff82 	bl	80012d6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	2002      	movs	r0, #2
 80013d4:	f7ff ff4d 	bl	8001272 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013d8:	23c0      	movs	r3, #192	; 0xc0
 80013da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013e8:	2307      	movs	r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	4619      	mov	r1, r3
 80013f2:	4804      	ldr	r0, [pc, #16]	; (8001404 <HAL_UART_MspInit+0x5c>)
 80013f4:	f000 fa8c 	bl	8001910 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013f8:	bf00      	nop
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40013800 	.word	0x40013800
 8001404:	48000400 	.word	0x48000400

08001408 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <HAL_PCD_MspInit+0x5c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d118      	bne.n	800145c <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2001      	movs	r0, #1
 800142c:	f7ff ff21 	bl	8001272 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001430:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001434:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001442:	230a      	movs	r3, #10
 8001444:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	4619      	mov	r1, r3
 800144c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001450:	f000 fa5e 	bl	8001910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001454:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001458:	f7ff ff24 	bl	80012a4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800145c:	bf00      	nop
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40006800 	.word	0x40006800

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800146c:	e7fe      	b.n	800146c <NMI_Handler+0x4>

0800146e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <HardFault_Handler+0x4>

08001474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <MemManage_Handler+0x4>

0800147a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <BusFault_Handler+0x4>

08001480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <UsageFault_Handler+0x4>

08001486 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b4:	f000 f8f0 	bl	8001698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}

080014bc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80014c2:	f002 fc9b 	bl	8003dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200000c4 	.word	0x200000c4

080014d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80014d4:	4b24      	ldr	r3, [pc, #144]	; (8001568 <SystemInit+0x98>)
 80014d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014da:	4a23      	ldr	r2, [pc, #140]	; (8001568 <SystemInit+0x98>)
 80014dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80014f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80014fc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80014fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <SystemInit+0x9c>)
 800150a:	4013      	ands	r3, r2
 800150c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800150e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001516:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800151a:	f023 0305 	bic.w	r3, r3, #5
 800151e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001526:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800152a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800152e:	f023 0301 	bic.w	r3, r3, #1
 8001532:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153a:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <SystemInit+0xa0>)
 800153c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800153e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001542:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <SystemInit+0xa0>)
 8001544:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001554:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00
 800156c:	faf6fefb 	.word	0xfaf6fefb
 8001570:	22041000 	.word	0x22041000

08001574 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001574:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001576:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001578:	3304      	adds	r3, #4

0800157a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800157a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800157e:	d3f9      	bcc.n	8001574 <CopyDataInit>
  bx lr
 8001580:	4770      	bx	lr

08001582 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001582:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001584:	3004      	adds	r0, #4

08001586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001586:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001588:	d3fb      	bcc.n	8001582 <FillZerobss>
  bx lr
 800158a:	4770      	bx	lr

0800158c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800158c:	480c      	ldr	r0, [pc, #48]	; (80015c0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800158e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001590:	f7ff ff9e 	bl	80014d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001594:	480b      	ldr	r0, [pc, #44]	; (80015c4 <LoopForever+0x8>)
 8001596:	490c      	ldr	r1, [pc, #48]	; (80015c8 <LoopForever+0xc>)
 8001598:	4a0c      	ldr	r2, [pc, #48]	; (80015cc <LoopForever+0x10>)
 800159a:	2300      	movs	r3, #0
 800159c:	f7ff ffed 	bl	800157a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80015a0:	480b      	ldr	r0, [pc, #44]	; (80015d0 <LoopForever+0x14>)
 80015a2:	490c      	ldr	r1, [pc, #48]	; (80015d4 <LoopForever+0x18>)
 80015a4:	2300      	movs	r3, #0
 80015a6:	f7ff ffee 	bl	8001586 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80015aa:	480b      	ldr	r0, [pc, #44]	; (80015d8 <LoopForever+0x1c>)
 80015ac:	490b      	ldr	r1, [pc, #44]	; (80015dc <LoopForever+0x20>)
 80015ae:	2300      	movs	r3, #0
 80015b0:	f7ff ffe9 	bl	8001586 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015b4:	f004 f914 	bl	80057e0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80015b8:	f7ff fae4 	bl	8000b84 <main>

080015bc <LoopForever>:

LoopForever:
  b LoopForever
 80015bc:	e7fe      	b.n	80015bc <LoopForever>
 80015be:	0000      	.short	0x0000
  ldr   r0, =_estack
 80015c0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80015c4:	20000004 	.word	0x20000004
 80015c8:	20000014 	.word	0x20000014
 80015cc:	080067fc 	.word	0x080067fc
  INIT_BSS _sbss, _ebss
 80015d0:	20000014 	.word	0x20000014
 80015d4:	20000408 	.word	0x20000408
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80015d8:	20030000 	.word	0x20030000
 80015dc:	20030000 	.word	0x20030000

080015e0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC1_IRQHandler>
	...

080015e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_Init+0x3c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <HAL_Init+0x3c>)
 80015f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fa:	2003      	movs	r0, #3
 80015fc:	f000 f948 	bl	8001890 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001600:	2000      	movs	r0, #0
 8001602:	f000 f80f 	bl	8001624 <HAL_InitTick>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	71fb      	strb	r3, [r7, #7]
 8001610:	e001      	b.n	8001616 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001612:	f7ff fe79 	bl	8001308 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001616:	79fb      	ldrb	r3, [r7, #7]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	58004000 	.word	0x58004000

08001624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_InitTick+0x6c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d024      	beq.n	8001682 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001638:	f001 fcce 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 800163c:	4602      	mov	r2, r0
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <HAL_InitTick+0x6c>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	4619      	mov	r1, r3
 8001644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001648:	fbb3 f3f1 	udiv	r3, r3, r1
 800164c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001650:	4618      	mov	r0, r3
 8001652:	f000 f950 	bl	80018f6 <HAL_SYSTICK_Config>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10f      	bne.n	800167c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b0f      	cmp	r3, #15
 8001660:	d809      	bhi.n	8001676 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001662:	2200      	movs	r2, #0
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	f04f 30ff 	mov.w	r0, #4294967295
 800166a:	f000 f91c 	bl	80018a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <HAL_InitTick+0x70>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	e007      	b.n	8001686 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	73fb      	strb	r3, [r7, #15]
 800167a:	e004      	b.n	8001686 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	73fb      	strb	r3, [r7, #15]
 8001680:	e001      	b.n	8001686 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000010 	.word	0x20000010
 8001694:	2000000c 	.word	0x2000000c

08001698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_IncTick+0x20>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_IncTick+0x24>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	4a04      	ldr	r2, [pc, #16]	; (80016bc <HAL_IncTick+0x24>)
 80016aa:	6013      	str	r3, [r2, #0]
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000010 	.word	0x20000010
 80016bc:	20000404 	.word	0x20000404

080016c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return uwTick;
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <HAL_GetTick+0x14>)
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000404 	.word	0x20000404

080016d8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <HAL_GetTickPrio+0x14>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	2000000c 	.word	0x2000000c

080016f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800171c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <__NVIC_GetPriorityGrouping+0x18>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	f003 0307 	and.w	r3, r3, #7
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	2b00      	cmp	r3, #0
 8001764:	db0b      	blt.n	800177e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	f003 021f 	and.w	r2, r3, #31
 800176c:	4907      	ldr	r1, [pc, #28]	; (800178c <__NVIC_EnableIRQ+0x38>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	2001      	movs	r0, #1
 8001776:	fa00 f202 	lsl.w	r2, r0, r2
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e100 	.word	0xe000e100

08001790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db0a      	blt.n	80017ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	490c      	ldr	r1, [pc, #48]	; (80017dc <__NVIC_SetPriority+0x4c>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	0112      	lsls	r2, r2, #4
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b8:	e00a      	b.n	80017d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4908      	ldr	r1, [pc, #32]	; (80017e0 <__NVIC_SetPriority+0x50>)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	3b04      	subs	r3, #4
 80017c8:	0112      	lsls	r2, r2, #4
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	440b      	add	r3, r1
 80017ce:	761a      	strb	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2b04      	cmp	r3, #4
 8001800:	bf28      	it	cs
 8001802:	2304      	movcs	r3, #4
 8001804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3304      	adds	r3, #4
 800180a:	2b06      	cmp	r3, #6
 800180c:	d902      	bls.n	8001814 <NVIC_EncodePriority+0x30>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3b03      	subs	r3, #3
 8001812:	e000      	b.n	8001816 <NVIC_EncodePriority+0x32>
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	f04f 32ff 	mov.w	r2, #4294967295
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43da      	mvns	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800182c:	f04f 31ff 	mov.w	r1, #4294967295
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	43d9      	mvns	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	4313      	orrs	r3, r2
         );
}
 800183e:	4618      	mov	r0, r3
 8001840:	3724      	adds	r7, #36	; 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800185c:	d301      	bcc.n	8001862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185e:	2301      	movs	r3, #1
 8001860:	e00f      	b.n	8001882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <SysTick_Config+0x40>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186a:	210f      	movs	r1, #15
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f7ff ff8e 	bl	8001790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <SysTick_Config+0x40>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <SysTick_Config+0x40>)
 800187c:	2207      	movs	r2, #7
 800187e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	e000e010 	.word	0xe000e010

08001890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff29 	bl	80016f0 <__NVIC_SetPriorityGrouping>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018b4:	f7ff ff40 	bl	8001738 <__NVIC_GetPriorityGrouping>
 80018b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	f7ff ff90 	bl	80017e4 <NVIC_EncodePriority>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff5f 	bl	8001790 <__NVIC_SetPriority>
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff33 	bl	8001754 <__NVIC_EnableIRQ>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffa4 	bl	800184c <SysTick_Config>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001910:	b480      	push	{r7}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191e:	e14c      	b.n	8001bba <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	2101      	movs	r1, #1
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	4013      	ands	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 813e 	beq.w	8001bb4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d00b      	beq.n	8001958 <HAL_GPIO_Init+0x48>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d007      	beq.n	8001958 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800194c:	2b11      	cmp	r3, #17
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b12      	cmp	r3, #18
 8001956:	d130      	bne.n	80019ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	2203      	movs	r2, #3
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800198e:	2201      	movs	r2, #1
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	091b      	lsrs	r3, r3, #4
 80019a4:	f003 0201 	and.w	r2, r3, #1
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	2203      	movs	r2, #3
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0xea>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d123      	bne.n	8001a42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	08da      	lsrs	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3208      	adds	r2, #8
 8001a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	220f      	movs	r2, #15
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	691a      	ldr	r2, [r3, #16]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	08da      	lsrs	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3208      	adds	r2, #8
 8001a3c:	6939      	ldr	r1, [r7, #16]
 8001a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0203 	and.w	r2, r3, #3
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8098 	beq.w	8001bb4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001a84:	4a54      	ldr	r2, [pc, #336]	; (8001bd8 <HAL_GPIO_Init+0x2c8>)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	089b      	lsrs	r3, r3, #2
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001aae:	d019      	beq.n	8001ae4 <HAL_GPIO_Init+0x1d4>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a4a      	ldr	r2, [pc, #296]	; (8001bdc <HAL_GPIO_Init+0x2cc>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d013      	beq.n	8001ae0 <HAL_GPIO_Init+0x1d0>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a49      	ldr	r2, [pc, #292]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d00d      	beq.n	8001adc <HAL_GPIO_Init+0x1cc>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a48      	ldr	r2, [pc, #288]	; (8001be4 <HAL_GPIO_Init+0x2d4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d007      	beq.n	8001ad8 <HAL_GPIO_Init+0x1c8>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a47      	ldr	r2, [pc, #284]	; (8001be8 <HAL_GPIO_Init+0x2d8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d101      	bne.n	8001ad4 <HAL_GPIO_Init+0x1c4>
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	e008      	b.n	8001ae6 <HAL_GPIO_Init+0x1d6>
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	e006      	b.n	8001ae6 <HAL_GPIO_Init+0x1d6>
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e004      	b.n	8001ae6 <HAL_GPIO_Init+0x1d6>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e002      	b.n	8001ae6 <HAL_GPIO_Init+0x1d6>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <HAL_GPIO_Init+0x1d6>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	f002 0203 	and.w	r2, r2, #3
 8001aec:	0092      	lsls	r2, r2, #2
 8001aee:	4093      	lsls	r3, r2
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001af6:	4938      	ldr	r1, [pc, #224]	; (8001bd8 <HAL_GPIO_Init+0x2c8>)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	3302      	adds	r3, #2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <HAL_GPIO_Init+0x2dc>)
 8001b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b2a:	4a30      	ldr	r2, [pc, #192]	; (8001bec <HAL_GPIO_Init+0x2dc>)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <HAL_GPIO_Init+0x2dc>)
 8001b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b58:	4a24      	ldr	r2, [pc, #144]	; (8001bec <HAL_GPIO_Init+0x2dc>)
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b60:	4b22      	ldr	r3, [pc, #136]	; (8001bec <HAL_GPIO_Init+0x2dc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b84:	4a19      	ldr	r2, [pc, #100]	; (8001bec <HAL_GPIO_Init+0x2dc>)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_GPIO_Init+0x2dc>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bae:	4a0f      	ldr	r2, [pc, #60]	; (8001bec <HAL_GPIO_Init+0x2dc>)
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f47f aeab 	bne.w	8001920 <HAL_GPIO_Init+0x10>
  }
}
 8001bca:	bf00      	nop
 8001bcc:	bf00      	nop
 8001bce:	371c      	adds	r7, #28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	40010000 	.word	0x40010000
 8001bdc:	48000400 	.word	0x48000400
 8001be0:	48000800 	.word	0x48000800
 8001be4:	48000c00 	.word	0x48000c00
 8001be8:	48001000 	.word	0x48001000
 8001bec:	58000800 	.word	0x58000800

08001bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c00:	787b      	ldrb	r3, [r7, #1]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c0c:	e002      	b.n	8001c14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c22:	b08b      	sub	sp, #44	; 0x2c
 8001c24:	af06      	add	r7, sp, #24
 8001c26:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e0d7      	b.n	8001de2 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fbde 	bl	8001408 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2203      	movs	r2, #3
 8001c50:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 fd85 	bl	8005768 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
 8001c62:	e04c      	b.n	8001cfe <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	3301      	adds	r3, #1
 8001c76:	2201      	movs	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	7bfa      	ldrb	r2, [r7, #15]
 8001c8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	b298      	uxth	r0, r3
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	440b      	add	r3, r1
 8001ca0:	3336      	adds	r3, #54	; 0x36
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	3303      	adds	r3, #3
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	440b      	add	r3, r1
 8001cca:	3338      	adds	r3, #56	; 0x38
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cd0:	7bfa      	ldrb	r2, [r7, #15]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	440b      	add	r3, r1
 8001cde:	333c      	adds	r3, #60	; 0x3c
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3340      	adds	r3, #64	; 0x40
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	73fb      	strb	r3, [r7, #15]
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d3ad      	bcc.n	8001c64 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e044      	b.n	8001d98 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	440b      	add	r3, r1
 8001d32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	440b      	add	r3, r1
 8001d48:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	440b      	add	r3, r1
 8001d5e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	440b      	add	r3, r1
 8001d74:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	440b      	add	r3, r1
 8001d8a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	3301      	adds	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d3b5      	bcc.n	8001d0e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	687e      	ldr	r6, [r7, #4]
 8001daa:	466d      	mov	r5, sp
 8001dac:	f106 0410 	add.w	r4, r6, #16
 8001db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db4:	6823      	ldr	r3, [r4, #0]
 8001db6:	602b      	str	r3, [r5, #0]
 8001db8:	1d33      	adds	r3, r6, #4
 8001dba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dbc:	6838      	ldr	r0, [r7, #0]
 8001dbe:	f003 fcee 	bl	800579e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d102      	bne.n	8001de0 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f805 	bl	8001dea <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dea <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4e:	6013      	str	r3, [r2, #0]
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	58000400 	.word	0x58000400

08001e60 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	58000400 	.word	0x58000400

08001e7c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e8e:	d101      	bne.n	8001e94 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_RCC_HSE_Enable>:
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <LL_RCC_HSE_Disable>:
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_RCC_HSE_IsReady>:
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001eee:	d101      	bne.n	8001ef4 <LL_RCC_HSE_IsReady+0x18>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <LL_RCC_HSE_IsReady+0x1a>
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_RCC_HSI_Enable>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f12:	6013      	str	r3, [r2, #0]
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <LL_RCC_HSI_Disable>:
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f30:	6013      	str	r3, [r2, #0]
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_RCC_HSI_IsReady>:
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f4e:	d101      	bne.n	8001f54 <LL_RCC_HSI_IsReady+0x18>
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <LL_RCC_HSI_IsReady+0x1a>
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	061b      	lsls	r3, r3, #24
 8001f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	604b      	str	r3, [r1, #4]
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <LL_RCC_HSI48_Enable>:
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_RCC_HSI48_Disable>:
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <LL_RCC_HSI48_IsReady>:
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d101      	bne.n	8001fe6 <LL_RCC_HSI48_IsReady+0x18>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <LL_RCC_HSI48_IsReady+0x1a>
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <LL_RCC_LSE_Enable>:
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_RCC_LSE_Disable>:
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002020:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <LL_RCC_LSE_EnableBypass>:
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800203a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002046:	f043 0304 	orr.w	r3, r3, #4
 800204a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_RCC_LSE_DisableBypass>:
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800205c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002068:	f023 0304 	bic.w	r3, r3, #4
 800206c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800207e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b02      	cmp	r3, #2
 800208c:	d101      	bne.n	8002092 <LL_RCC_LSE_IsReady+0x18>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <LL_RCC_LSE_IsReady+0x1a>
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80020a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80020c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020d0:	f023 0301 	bic.w	r3, r3, #1
 80020d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80020e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d101      	bne.n	80020fa <LL_RCC_LSI1_IsReady+0x18>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <LL_RCC_LSI1_IsReady+0x1a>
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800210a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002116:	f043 0304 	orr.w	r3, r3, #4
 800211a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800211e:	bf00      	nop
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800212c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002138:	f023 0304 	bic.w	r3, r3, #4
 800213c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800214e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b08      	cmp	r3, #8
 800215c:	d101      	bne.n	8002162 <LL_RCC_LSI2_IsReady+0x18>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <LL_RCC_LSI2_IsReady+0x1a>
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80021a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6013      	str	r3, [r2, #0]
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80021be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	6013      	str	r3, [r2, #0]
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80021dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d101      	bne.n	80021ee <LL_RCC_MSI_IsReady+0x16>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <LL_RCC_MSI_IsReady+0x18>
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800220c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002232:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2bb0      	cmp	r3, #176	; 0xb0
 8002238:	d901      	bls.n	800223e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800223a:	23b0      	movs	r3, #176	; 0xb0
 800223c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800223e:	687b      	ldr	r3, [r7, #4]
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002266:	4313      	orrs	r3, r2
 8002268:	604b      	str	r3, [r1, #4]
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800227e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f023 0203 	bic.w	r2, r3, #3
 8002288:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4313      	orrs	r3, r2
 8002290:	608b      	str	r3, [r1, #8]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80022a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80022be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80022e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80022ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002316:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800231a:	f023 020f 	bic.w	r2, r3, #15
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800234a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4313      	orrs	r3, r2
 8002352:	608b      	str	r3, [r1, #8]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002372:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4313      	orrs	r3, r2
 800237a:	608b      	str	r3, [r1, #8]
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800238c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80023a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80023c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80023d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80023f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023fe:	6013      	str	r3, [r2, #0]
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800240e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002418:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800241c:	6013      	str	r3, [r2, #0]
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800242c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800243a:	d101      	bne.n	8002440 <LL_RCC_PLL_IsReady+0x18>
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <LL_RCC_PLL_IsReady+0x1a>
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800246a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800249a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 0303 	and.w	r3, r3, #3
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80024b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c0:	d101      	bne.n	80024c6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80024d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024e6:	d101      	bne.n	80024ec <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80024fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002500:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250c:	d101      	bne.n	8002512 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002530:	d101      	bne.n	8002536 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002550:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002554:	d101      	bne.n	800255a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b08d      	sub	sp, #52	; 0x34
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e37e      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 8092 	beq.w	80026ac <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002588:	f7ff fe89 	bl	800229e <LL_RCC_GetSysClkSource>
 800258c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800258e:	f7ff ff82 	bl	8002496 <LL_RCC_PLL_GetMainSource>
 8002592:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_RCC_OscConfig+0x3e>
 800259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259c:	2b0c      	cmp	r3, #12
 800259e:	d14c      	bne.n	800263a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80025a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d149      	bne.n	800263a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025a6:	f7ff fe17 	bl	80021d8 <LL_RCC_MSI_IsReady>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_OscConfig+0x54>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e35d      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80025c0:	f7ff fe2f 	bl	8002222 <LL_RCC_MSI_GetRange>
 80025c4:	4603      	mov	r3, r0
 80025c6:	429c      	cmp	r4, r3
 80025c8:	d914      	bls.n	80025f4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fd42 	bl	8003058 <RCC_SetFlashLatencyFromMSIRange>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e34c      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fe09 	bl	80021fa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fe2d 	bl	800224c <LL_RCC_MSI_SetCalibTrimming>
 80025f2:	e013      	b.n	800261c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fdfe 	bl	80021fa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fe22 	bl	800224c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fd23 	bl	8003058 <RCC_SetFlashLatencyFromMSIRange>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e32d      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800261c:	f000 fcdc 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8002620:	4603      	mov	r3, r0
 8002622:	4ab3      	ldr	r2, [pc, #716]	; (80028f0 <HAL_RCC_OscConfig+0x388>)
 8002624:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002626:	4bb3      	ldr	r3, [pc, #716]	; (80028f4 <HAL_RCC_OscConfig+0x38c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe fffa 	bl	8001624 <HAL_InitTick>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d039      	beq.n	80026aa <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e31e      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d01e      	beq.n	8002680 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002642:	f7ff fdab 	bl	800219c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002646:	f7ff f83b 	bl	80016c0 <HAL_GetTick>
 800264a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800264e:	f7ff f837 	bl	80016c0 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e30b      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002660:	f7ff fdba 	bl	80021d8 <LL_RCC_MSI_IsReady>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f1      	beq.n	800264e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fdc3 	bl	80021fa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fde7 	bl	800224c <LL_RCC_MSI_SetCalibTrimming>
 800267e:	e015      	b.n	80026ac <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002680:	f7ff fd9b 	bl	80021ba <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002684:	f7ff f81c 	bl	80016c0 <HAL_GetTick>
 8002688:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800268c:	f7ff f818 	bl	80016c0 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e2ec      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800269e:	f7ff fd9b 	bl	80021d8 <LL_RCC_MSI_IsReady>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f1      	bne.n	800268c <HAL_RCC_OscConfig+0x124>
 80026a8:	e000      	b.n	80026ac <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d04e      	beq.n	8002756 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026b8:	f7ff fdf1 	bl	800229e <LL_RCC_GetSysClkSource>
 80026bc:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026be:	f7ff feea 	bl	8002496 <LL_RCC_PLL_GetMainSource>
 80026c2:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d005      	beq.n	80026d6 <HAL_RCC_OscConfig+0x16e>
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	2b0c      	cmp	r3, #12
 80026ce:	d10d      	bne.n	80026ec <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d10a      	bne.n	80026ec <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d6:	f7ff fc01 	bl	8001edc <LL_RCC_HSE_IsReady>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d039      	beq.n	8002754 <HAL_RCC_OscConfig+0x1ec>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d135      	bne.n	8002754 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e2c5      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f4:	d102      	bne.n	80026fc <HAL_RCC_OscConfig+0x194>
 80026f6:	f7ff fbd3 	bl	8001ea0 <LL_RCC_HSE_Enable>
 80026fa:	e001      	b.n	8002700 <HAL_RCC_OscConfig+0x198>
 80026fc:	f7ff fbdf 	bl	8001ebe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d012      	beq.n	800272e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002708:	f7fe ffda 	bl	80016c0 <HAL_GetTick>
 800270c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002710:	f7fe ffd6 	bl	80016c0 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	; 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e2aa      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002722:	f7ff fbdb 	bl	8001edc <LL_RCC_HSE_IsReady>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f1      	beq.n	8002710 <HAL_RCC_OscConfig+0x1a8>
 800272c:	e013      	b.n	8002756 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272e:	f7fe ffc7 	bl	80016c0 <HAL_GetTick>
 8002732:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002736:	f7fe ffc3 	bl	80016c0 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b64      	cmp	r3, #100	; 0x64
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e297      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002748:	f7ff fbc8 	bl	8001edc <LL_RCC_HSE_IsReady>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f1      	bne.n	8002736 <HAL_RCC_OscConfig+0x1ce>
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d051      	beq.n	8002806 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002762:	f7ff fd9c 	bl	800229e <LL_RCC_GetSysClkSource>
 8002766:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002768:	f7ff fe95 	bl	8002496 <LL_RCC_PLL_GetMainSource>
 800276c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	2b04      	cmp	r3, #4
 8002772:	d005      	beq.n	8002780 <HAL_RCC_OscConfig+0x218>
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2b0c      	cmp	r3, #12
 8002778:	d113      	bne.n	80027a2 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d110      	bne.n	80027a2 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002780:	f7ff fbdc 	bl	8001f3c <LL_RCC_HSI_IsReady>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d005      	beq.n	8002796 <HAL_RCC_OscConfig+0x22e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e270      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fbe0 	bl	8001f60 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a0:	e031      	b.n	8002806 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d019      	beq.n	80027de <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027aa:	f7ff fba9 	bl	8001f00 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ae:	f7fe ff87 	bl	80016c0 <HAL_GetTick>
 80027b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b6:	f7fe ff83 	bl	80016c0 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e257      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80027c8:	f7ff fbb8 	bl	8001f3c <LL_RCC_HSI_IsReady>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f1      	beq.n	80027b6 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fbc2 	bl	8001f60 <LL_RCC_HSI_SetCalibTrimming>
 80027dc:	e013      	b.n	8002806 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027de:	f7ff fb9e 	bl	8001f1e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e2:	f7fe ff6d 	bl	80016c0 <HAL_GetTick>
 80027e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ea:	f7fe ff69 	bl	80016c0 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e23d      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80027fc:	f7ff fb9e 	bl	8001f3c <LL_RCC_HSI_IsReady>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f1      	bne.n	80027ea <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 80a3 	beq.w	8002966 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d076      	beq.n	8002916 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	2b00      	cmp	r3, #0
 8002832:	d046      	beq.n	80028c2 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002834:	f7ff fc55 	bl	80020e2 <LL_RCC_LSI1_IsReady>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d113      	bne.n	8002866 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800283e:	f7ff fc2e 	bl	800209e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002842:	f7fe ff3d 	bl	80016c0 <HAL_GetTick>
 8002846:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800284a:	f7fe ff39 	bl	80016c0 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e20d      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800285c:	f7ff fc41 	bl	80020e2 <LL_RCC_LSI1_IsReady>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f1      	beq.n	800284a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002866:	f7ff fc4e 	bl	8002106 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286a:	f7fe ff29 	bl	80016c0 <HAL_GetTick>
 800286e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002872:	f7fe ff25 	bl	80016c0 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b03      	cmp	r3, #3
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e1f9      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002884:	f7ff fc61 	bl	800214a <LL_RCC_LSI2_IsReady>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f1      	beq.n	8002872 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fc6b 	bl	800216e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002898:	f7ff fc12 	bl	80020c0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe ff10 	bl	80016c0 <HAL_GetTick>
 80028a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80028a4:	f7fe ff0c 	bl	80016c0 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e1e0      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80028b6:	f7ff fc14 	bl	80020e2 <LL_RCC_LSI1_IsReady>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f1      	bne.n	80028a4 <HAL_RCC_OscConfig+0x33c>
 80028c0:	e051      	b.n	8002966 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80028c2:	f7ff fbec 	bl	800209e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c6:	f7fe fefb 	bl	80016c0 <HAL_GetTick>
 80028ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80028ce:	f7fe fef7 	bl	80016c0 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e1cb      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80028e0:	f7ff fbff 	bl	80020e2 <LL_RCC_LSI1_IsReady>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f1      	beq.n	80028ce <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80028ea:	f7ff fc1d 	bl	8002128 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80028ee:	e00c      	b.n	800290a <HAL_RCC_OscConfig+0x3a2>
 80028f0:	20000008 	.word	0x20000008
 80028f4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80028f8:	f7fe fee2 	bl	80016c0 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b03      	cmp	r3, #3
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e1b6      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800290a:	f7ff fc1e 	bl	800214a <LL_RCC_LSI2_IsReady>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f1      	bne.n	80028f8 <HAL_RCC_OscConfig+0x390>
 8002914:	e027      	b.n	8002966 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002916:	f7ff fc07 	bl	8002128 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291a:	f7fe fed1 	bl	80016c0 <HAL_GetTick>
 800291e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002922:	f7fe fecd 	bl	80016c0 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b03      	cmp	r3, #3
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e1a1      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002934:	f7ff fc09 	bl	800214a <LL_RCC_LSI2_IsReady>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f1      	bne.n	8002922 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800293e:	f7ff fbbf 	bl	80020c0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002942:	f7fe febd 	bl	80016c0 <HAL_GetTick>
 8002946:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800294a:	f7fe feb9 	bl	80016c0 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e18d      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800295c:	f7ff fbc1 	bl	80020e2 <LL_RCC_LSI1_IsReady>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f1      	bne.n	800294a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	d05b      	beq.n	8002a2a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002972:	4bb5      	ldr	r3, [pc, #724]	; (8002c48 <HAL_RCC_OscConfig+0x6e0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d114      	bne.n	80029a8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800297e:	f7ff fa5f 	bl	8001e40 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002982:	f7fe fe9d 	bl	80016c0 <HAL_GetTick>
 8002986:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298a:	f7fe fe99 	bl	80016c0 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e16d      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800299c:	4baa      	ldr	r3, [pc, #680]	; (8002c48 <HAL_RCC_OscConfig+0x6e0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d102      	bne.n	80029b6 <HAL_RCC_OscConfig+0x44e>
 80029b0:	f7ff fb1f 	bl	8001ff2 <LL_RCC_LSE_Enable>
 80029b4:	e00c      	b.n	80029d0 <HAL_RCC_OscConfig+0x468>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b05      	cmp	r3, #5
 80029bc:	d104      	bne.n	80029c8 <HAL_RCC_OscConfig+0x460>
 80029be:	f7ff fb3a 	bl	8002036 <LL_RCC_LSE_EnableBypass>
 80029c2:	f7ff fb16 	bl	8001ff2 <LL_RCC_LSE_Enable>
 80029c6:	e003      	b.n	80029d0 <HAL_RCC_OscConfig+0x468>
 80029c8:	f7ff fb24 	bl	8002014 <LL_RCC_LSE_Disable>
 80029cc:	f7ff fb44 	bl	8002058 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d014      	beq.n	8002a02 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d8:	f7fe fe72 	bl	80016c0 <HAL_GetTick>
 80029dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e0:	f7fe fe6e 	bl	80016c0 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e140      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80029f6:	f7ff fb40 	bl	800207a <LL_RCC_LSE_IsReady>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0ef      	beq.n	80029e0 <HAL_RCC_OscConfig+0x478>
 8002a00:	e013      	b.n	8002a2a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a02:	f7fe fe5d 	bl	80016c0 <HAL_GetTick>
 8002a06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002a08:	e00a      	b.n	8002a20 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7fe fe59 	bl	80016c0 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e12b      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002a20:	f7ff fb2b 	bl	800207a <LL_RCC_LSE_IsReady>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1ef      	bne.n	8002a0a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d02c      	beq.n	8002a90 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d014      	beq.n	8002a68 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a3e:	f7ff faa4 	bl	8001f8a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a42:	f7fe fe3d 	bl	80016c0 <HAL_GetTick>
 8002a46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a4a:	f7fe fe39 	bl	80016c0 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e10d      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002a5c:	f7ff fab7 	bl	8001fce <LL_RCC_HSI48_IsReady>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f1      	beq.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
 8002a66:	e013      	b.n	8002a90 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a68:	f7ff faa0 	bl	8001fac <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7fe fe28 	bl	80016c0 <HAL_GetTick>
 8002a70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a74:	f7fe fe24 	bl	80016c0 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e0f8      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002a86:	f7ff faa2 	bl	8001fce <LL_RCC_HSI48_IsReady>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f1      	bne.n	8002a74 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80ee 	beq.w	8002c76 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a9a:	f7ff fc00 	bl	800229e <LL_RCC_GetSysClkSource>
 8002a9e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	f040 80af 	bne.w	8002c10 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f003 0203 	and.w	r2, r3, #3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d123      	bne.n	8002b08 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d11c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	0a1b      	lsrs	r3, r3, #8
 8002ad2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d114      	bne.n	8002b08 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d10d      	bne.n	8002b08 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d106      	bne.n	8002b08 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d05d      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	2b0c      	cmp	r3, #12
 8002b0c:	d058      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0ab      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b20:	f7ff fc73 	bl	800240a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b24:	f7fe fdcc 	bl	80016c0 <HAL_GetTick>
 8002b28:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe fdc8 	bl	80016c0 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e09c      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1ef      	bne.n	8002b2c <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	4b3e      	ldr	r3, [pc, #248]	; (8002c4c <HAL_RCC_OscConfig+0x6e4>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b5e:	4311      	orrs	r1, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b64:	0212      	lsls	r2, r2, #8
 8002b66:	4311      	orrs	r1, r2
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b6c:	4311      	orrs	r1, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b72:	4311      	orrs	r1, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b82:	f7ff fc33 	bl	80023ec <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b94:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b96:	f7fe fd93 	bl	80016c0 <HAL_GetTick>
 8002b9a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9e:	f7fe fd8f 	bl	80016c0 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e063      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0ef      	beq.n	8002b9e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bbe:	e05a      	b.n	8002c76 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e059      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d151      	bne.n	8002c76 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bd2:	f7ff fc0b 	bl	80023ec <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002be6:	f7fe fd6b 	bl	80016c0 <HAL_GetTick>
 8002bea:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fe fd67 	bl	80016c0 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e03b      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0ef      	beq.n	8002bee <HAL_RCC_OscConfig+0x686>
 8002c0e:	e032      	b.n	8002c76 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d02d      	beq.n	8002c72 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c16:	f7ff fbf8 	bl	800240a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c24:	f023 0303 	bic.w	r3, r3, #3
 8002c28:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c34:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3e:	f7fe fd3f 	bl	80016c0 <HAL_GetTick>
 8002c42:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c44:	e00d      	b.n	8002c62 <HAL_RCC_OscConfig+0x6fa>
 8002c46:	bf00      	nop
 8002c48:	58000400 	.word	0x58000400
 8002c4c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c50:	f7fe fd36 	bl	80016c0 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e00a      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1ef      	bne.n	8002c50 <HAL_RCC_OscConfig+0x6e8>
 8002c70:	e001      	b.n	8002c76 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3734      	adds	r7, #52	; 0x34
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd90      	pop	{r4, r7, pc}

08002c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e12d      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c94:	4b98      	ldr	r3, [pc, #608]	; (8002ef8 <HAL_RCC_ClockConfig+0x278>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d91b      	bls.n	8002cda <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca2:	4b95      	ldr	r3, [pc, #596]	; (8002ef8 <HAL_RCC_ClockConfig+0x278>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 0207 	bic.w	r2, r3, #7
 8002caa:	4993      	ldr	r1, [pc, #588]	; (8002ef8 <HAL_RCC_ClockConfig+0x278>)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb2:	f7fe fd05 	bl	80016c0 <HAL_GetTick>
 8002cb6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002cba:	f7fe fd01 	bl	80016c0 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e111      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ccc:	4b8a      	ldr	r3, [pc, #552]	; (8002ef8 <HAL_RCC_ClockConfig+0x278>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d1ef      	bne.n	8002cba <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d016      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fae3 	bl	80022b6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002cf0:	f7fe fce6 	bl	80016c0 <HAL_GetTick>
 8002cf4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002cf8:	f7fe fce2 	bl	80016c0 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e0f2      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d0a:	f7ff fbd0 	bl	80024ae <LL_RCC_IsActiveFlag_HPRE>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0f1      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d016      	beq.n	8002d4e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fada 	bl	80022de <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d2a:	f7fe fcc9 	bl	80016c0 <HAL_GetTick>
 8002d2e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d32:	f7fe fcc5 	bl	80016c0 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e0d5      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002d44:	f7ff fbc5 	bl	80024d2 <LL_RCC_IsActiveFlag_C2HPRE>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f1      	beq.n	8002d32 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d016      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fad3 	bl	800230a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d64:	f7fe fcac 	bl	80016c0 <HAL_GetTick>
 8002d68:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d6c:	f7fe fca8 	bl	80016c0 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e0b8      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d7e:	f7ff fbbb 	bl	80024f8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f1      	beq.n	8002d6c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d016      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff facd 	bl	8002338 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d9e:	f7fe fc8f 	bl	80016c0 <HAL_GetTick>
 8002da2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002da6:	f7fe fc8b 	bl	80016c0 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e09b      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002db8:	f7ff fbb1 	bl	800251e <LL_RCC_IsActiveFlag_PPRE1>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f1      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d017      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fac3 	bl	8002360 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002dda:	f7fe fc71 	bl	80016c0 <HAL_GetTick>
 8002dde:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002de2:	f7fe fc6d 	bl	80016c0 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e07d      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002df4:	f7ff fba5 	bl	8002542 <LL_RCC_IsActiveFlag_PPRE2>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f1      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d043      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d106      	bne.n	8002e20 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002e12:	f7ff f863 	bl	8001edc <LL_RCC_HSE_IsReady>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d11e      	bne.n	8002e5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e067      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d106      	bne.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002e28:	f7ff fafe 	bl	8002428 <LL_RCC_PLL_IsReady>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d113      	bne.n	8002e5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e05c      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002e3e:	f7ff f9cb 	bl	80021d8 <LL_RCC_MSI_IsReady>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d108      	bne.n	8002e5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e051      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002e4c:	f7ff f876 	bl	8001f3c <LL_RCC_HSI_IsReady>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e04a      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fa09 	bl	8002276 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e64:	f7fe fc2c 	bl	80016c0 <HAL_GetTick>
 8002e68:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6a:	e00a      	b.n	8002e82 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6c:	f7fe fc28 	bl	80016c0 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e036      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e82:	f7ff fa0c 	bl	800229e <LL_RCC_GetSysClkSource>
 8002e86:	4602      	mov	r2, r0
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d1ec      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e92:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HAL_RCC_ClockConfig+0x278>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d21b      	bcs.n	8002ed8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea0:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <HAL_RCC_ClockConfig+0x278>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 0207 	bic.w	r2, r3, #7
 8002ea8:	4913      	ldr	r1, [pc, #76]	; (8002ef8 <HAL_RCC_ClockConfig+0x278>)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb0:	f7fe fc06 	bl	80016c0 <HAL_GetTick>
 8002eb4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002eb8:	f7fe fc02 	bl	80016c0 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e012      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eca:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_RCC_ClockConfig+0x278>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d1ef      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ed8:	f000 f87e 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8002edc:	4603      	mov	r3, r0
 8002ede:	4a07      	ldr	r2, [pc, #28]	; (8002efc <HAL_RCC_ClockConfig+0x27c>)
 8002ee0:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002ee2:	f7fe fbf9 	bl	80016d8 <HAL_GetTickPrio>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fe fb9b 	bl	8001624 <HAL_InitTick>
 8002eee:	4603      	mov	r3, r0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	58004000 	.word	0x58004000
 8002efc:	20000008 	.word	0x20000008

08002f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f00:	b590      	push	{r4, r7, lr}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f06:	f7ff f9ca 	bl	800229e <LL_RCC_GetSysClkSource>
 8002f0a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10a      	bne.n	8002f28 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002f12:	f7ff f986 	bl	8002222 <LL_RCC_MSI_GetRange>
 8002f16:	4603      	mov	r3, r0
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	4a2b      	ldr	r2, [pc, #172]	; (8002fcc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	e04b      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d102      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f2e:	4b28      	ldr	r3, [pc, #160]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	e045      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d10a      	bne.n	8002f50 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f3a:	f7fe ff9f 	bl	8001e7c <LL_RCC_HSE_IsEnabledDiv2>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d102      	bne.n	8002f4a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002f44:	4b22      	ldr	r3, [pc, #136]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	e03a      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002f4a:	4b22      	ldr	r3, [pc, #136]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	e037      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002f50:	f7ff faa1 	bl	8002496 <LL_RCC_PLL_GetMainSource>
 8002f54:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d003      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x64>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_GetSysClockFreq+0x6a>
 8002f62:	e00d      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002f64:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f66:	60bb      	str	r3, [r7, #8]
        break;
 8002f68:	e015      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f6a:	f7fe ff87 	bl	8001e7c <LL_RCC_HSE_IsEnabledDiv2>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d102      	bne.n	8002f7a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002f74:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f76:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002f78:	e00d      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002f7a:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f7c:	60bb      	str	r3, [r7, #8]
        break;
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002f80:	f7ff f94f 	bl	8002222 <LL_RCC_MSI_GetRange>
 8002f84:	4603      	mov	r3, r0
 8002f86:	091b      	lsrs	r3, r3, #4
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	4a0f      	ldr	r2, [pc, #60]	; (8002fcc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f92:	60bb      	str	r3, [r7, #8]
        break;
 8002f94:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002f96:	f7ff fa59 	bl	800244c <LL_RCC_PLL_GetN>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	fb03 f402 	mul.w	r4, r3, r2
 8002fa2:	f7ff fa6c 	bl	800247e <LL_RCC_PLL_GetDivider>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	091b      	lsrs	r3, r3, #4
 8002faa:	3301      	adds	r3, #1
 8002fac:	fbb4 f4f3 	udiv	r4, r4, r3
 8002fb0:	f7ff fa59 	bl	8002466 <LL_RCC_PLL_GetR>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	0f5b      	lsrs	r3, r3, #29
 8002fb8:	3301      	adds	r3, #1
 8002fba:	fbb4 f3f3 	udiv	r3, r4, r3
 8002fbe:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd90      	pop	{r4, r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	080063b4 	.word	0x080063b4
 8002fd0:	00f42400 	.word	0x00f42400
 8002fd4:	01e84800 	.word	0x01e84800

08002fd8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd8:	b598      	push	{r3, r4, r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002fdc:	f7ff ff90 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	f7ff f9d1 	bl	8002388 <LL_RCC_GetAHBPrescaler>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	4a03      	ldr	r2, [pc, #12]	; (8002ffc <HAL_RCC_GetHCLKFreq+0x24>)
 8002ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	bd98      	pop	{r3, r4, r7, pc}
 8002ffc:	08006354 	.word	0x08006354

08003000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003000:	b598      	push	{r3, r4, r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003004:	f7ff ffe8 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8003008:	4604      	mov	r4, r0
 800300a:	f7ff f9d7 	bl	80023bc <LL_RCC_GetAPB1Prescaler>
 800300e:	4603      	mov	r3, r0
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	4a04      	ldr	r2, [pc, #16]	; (8003028 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003024:	4618      	mov	r0, r3
 8003026:	bd98      	pop	{r3, r4, r7, pc}
 8003028:	08006394 	.word	0x08006394

0800302c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800302c:	b598      	push	{r3, r4, r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003030:	f7ff ffd2 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8003034:	4604      	mov	r4, r0
 8003036:	f7ff f9cd 	bl	80023d4 <LL_RCC_GetAPB2Prescaler>
 800303a:	4603      	mov	r3, r0
 800303c:	0adb      	lsrs	r3, r3, #11
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	4a04      	ldr	r2, [pc, #16]	; (8003054 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003050:	4618      	mov	r0, r3
 8003052:	bd98      	pop	{r3, r4, r7, pc}
 8003054:	08006394 	.word	0x08006394

08003058 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003058:	b590      	push	{r4, r7, lr}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2bb0      	cmp	r3, #176	; 0xb0
 8003064:	d903      	bls.n	800306e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003066:	4b15      	ldr	r3, [pc, #84]	; (80030bc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	e007      	b.n	800307e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	4a11      	ldr	r2, [pc, #68]	; (80030bc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800307e:	f7ff f98f 	bl	80023a0 <LL_RCC_GetAHB4Prescaler>
 8003082:	4603      	mov	r3, r0
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	4a0d      	ldr	r2, [pc, #52]	; (80030c0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800308c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	fbb2 f3f3 	udiv	r3, r2, r3
 8003096:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800309c:	fba2 2303 	umull	r2, r3, r2, r3
 80030a0:	0c9c      	lsrs	r4, r3, #18
 80030a2:	f7fe fedd 	bl	8001e60 <HAL_PWREx_GetVoltageRange>
 80030a6:	4603      	mov	r3, r0
 80030a8:	4619      	mov	r1, r3
 80030aa:	4620      	mov	r0, r4
 80030ac:	f000 f80c 	bl	80030c8 <RCC_SetFlashLatency>
 80030b0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd90      	pop	{r4, r7, pc}
 80030ba:	bf00      	nop
 80030bc:	080063b4 	.word	0x080063b4
 80030c0:	08006354 	.word	0x08006354
 80030c4:	431bde83 	.word	0x431bde83

080030c8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b093      	sub	sp, #76	; 0x4c
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80030d2:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <RCC_SetFlashLatency+0xf0>)
 80030d4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80030d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80030de:	4a37      	ldr	r2, [pc, #220]	; (80031bc <RCC_SetFlashLatency+0xf4>)
 80030e0:	f107 031c 	add.w	r3, r7, #28
 80030e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80030e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80030ea:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <RCC_SetFlashLatency+0xf8>)
 80030ec:	f107 040c 	add.w	r4, r7, #12
 80030f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80030f6:	2300      	movs	r3, #0
 80030f8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003100:	d11c      	bne.n	800313c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003102:	2300      	movs	r3, #0
 8003104:	643b      	str	r3, [r7, #64]	; 0x40
 8003106:	e015      	b.n	8003134 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003110:	4413      	add	r3, r2
 8003112:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	429a      	cmp	r2, r3
 800311a:	d808      	bhi.n	800312e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800311c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003124:	4413      	add	r3, r2
 8003126:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800312a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800312c:	e022      	b.n	8003174 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800312e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003130:	3301      	adds	r3, #1
 8003132:	643b      	str	r3, [r7, #64]	; 0x40
 8003134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003136:	2b03      	cmp	r3, #3
 8003138:	d9e6      	bls.n	8003108 <RCC_SetFlashLatency+0x40>
 800313a:	e01b      	b.n	8003174 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800313c:	2300      	movs	r3, #0
 800313e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003140:	e015      	b.n	800316e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800314a:	4413      	add	r3, r2
 800314c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	429a      	cmp	r2, r3
 8003154:	d808      	bhi.n	8003168 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800315e:	4413      	add	r3, r2
 8003160:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003164:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003166:	e005      	b.n	8003174 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316a:	3301      	adds	r3, #1
 800316c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800316e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003170:	2b02      	cmp	r3, #2
 8003172:	d9e6      	bls.n	8003142 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003174:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <RCC_SetFlashLatency+0xfc>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f023 0207 	bic.w	r2, r3, #7
 800317c:	4911      	ldr	r1, [pc, #68]	; (80031c4 <RCC_SetFlashLatency+0xfc>)
 800317e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003180:	4313      	orrs	r3, r2
 8003182:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003184:	f7fe fa9c 	bl	80016c0 <HAL_GetTick>
 8003188:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800318a:	e008      	b.n	800319e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800318c:	f7fe fa98 	bl	80016c0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e007      	b.n	80031ae <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800319e:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <RCC_SetFlashLatency+0xfc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1ef      	bne.n	800318c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	374c      	adds	r7, #76	; 0x4c
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd90      	pop	{r4, r7, pc}
 80031b6:	bf00      	nop
 80031b8:	08006328 	.word	0x08006328
 80031bc:	08006338 	.word	0x08006338
 80031c0:	08006344 	.word	0x08006344
 80031c4:	58004000 	.word	0x58004000

080031c8 <LL_RCC_LSE_IsEnabled>:
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80031cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <LL_RCC_LSE_IsEnabled+0x18>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <LL_RCC_LSE_IsEnabled+0x1a>
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <LL_RCC_LSE_IsReady>:
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80031f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d101      	bne.n	8003204 <LL_RCC_LSE_IsReady+0x18>
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <LL_RCC_LSE_IsReady+0x1a>
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <LL_RCC_MSI_EnablePLLMode>:
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800321e:	f043 0304 	orr.w	r3, r3, #4
 8003222:	6013      	str	r3, [r2, #0]
}
 8003224:	bf00      	nop
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <LL_RCC_SetRFWKPClockSource>:
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800323a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <LL_RCC_SetSMPSClockSource>:
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	f023 0203 	bic.w	r2, r3, #3
 800326c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4313      	orrs	r3, r2
 8003274:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <LL_RCC_SetSMPSPrescaler>:
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800328a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003294:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4313      	orrs	r3, r2
 800329c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <LL_RCC_SetUSARTClockSource>:
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80032b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ba:	f023 0203 	bic.w	r2, r3, #3
 80032be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <LL_RCC_SetLPUARTClockSource>:
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80032de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <LL_RCC_SetI2CClockSource>:
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800330a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800330e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	091b      	lsrs	r3, r3, #4
 8003316:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800331a:	43db      	mvns	r3, r3
 800331c:	401a      	ands	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003326:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <LL_RCC_SetLPTIMClockSource>:
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003348:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	0c1b      	lsrs	r3, r3, #16
 8003350:	041b      	lsls	r3, r3, #16
 8003352:	43db      	mvns	r3, r3
 8003354:	401a      	ands	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	041b      	lsls	r3, r3, #16
 800335a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <LL_RCC_SetSAIClockSource>:
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003380:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <LL_RCC_SetRNGClockSource>:
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80033a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ac:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80033b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <LL_RCC_SetCLK48ClockSource>:
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80033d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <LL_RCC_SetUSBClockSource>:
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff ffe3 	bl	80033c8 <LL_RCC_SetCLK48ClockSource>
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <LL_RCC_SetADCClockSource>:
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800341e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <LL_RCC_SetRTCClockSource>:
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800343e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800344a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <LL_RCC_GetRTCClockSource>:
{
 8003462:	b480      	push	{r7}
 8003464:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003472:	4618      	mov	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <LL_RCC_ForceBackupDomainReset>:
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003488:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800348c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <LL_RCC_ReleaseBackupDomainReset>:
{
 800349e:	b480      	push	{r7}
 80034a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80034a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80034b6:	bf00      	nop
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <LL_RCC_PLLSAI1_Enable>:
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80034c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034d2:	6013      	str	r3, [r2, #0]
}
 80034d4:	bf00      	nop
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <LL_RCC_PLLSAI1_Disable>:
{
 80034de:	b480      	push	{r7}
 80034e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80034e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034f0:	6013      	str	r3, [r2, #0]
}
 80034f2:	bf00      	nop
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <LL_RCC_PLLSAI1_IsReady>:
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800350a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800350e:	d101      	bne.n	8003514 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003528:	2300      	movs	r3, #0
 800352a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800352c:	2300      	movs	r3, #0
 800352e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003538:	2b00      	cmp	r3, #0
 800353a:	d034      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003544:	d021      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003546:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800354a:	d81b      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800354c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003550:	d01d      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003552:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003556:	d815      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00b      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800355c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003560:	d110      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800356c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003570:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003572:	e00d      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3304      	adds	r3, #4
 8003578:	4618      	mov	r0, r3
 800357a:	f000 f94d 	bl	8003818 <RCCEx_PLLSAI1_ConfigNP>
 800357e:	4603      	mov	r3, r0
 8003580:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003582:	e005      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	77fb      	strb	r3, [r7, #31]
        break;
 8003588:	e002      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800358a:	bf00      	nop
 800358c:	e000      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800358e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003590:	7ffb      	ldrb	r3, [r7, #31]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d105      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fee8 	bl	8003370 <LL_RCC_SetSAIClockSource>
 80035a0:	e001      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a2:	7ffb      	ldrb	r3, [r7, #31]
 80035a4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d046      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80035b2:	f7ff ff56 	bl	8003462 <LL_RCC_GetRTCClockSource>
 80035b6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d03c      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80035c2:	f7fe fc3d 	bl	8001e40 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d105      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff30 	bl	8003436 <LL_RCC_SetRTCClockSource>
 80035d6:	e02e      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80035d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80035e2:	f7ff ff4b 	bl	800347c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80035e6:	f7ff ff5a 	bl	800349e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80035f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003602:	f7ff fde1 	bl	80031c8 <LL_RCC_LSE_IsEnabled>
 8003606:	4603      	mov	r3, r0
 8003608:	2b01      	cmp	r3, #1
 800360a:	d114      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800360c:	f7fe f858 	bl	80016c0 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003612:	e00b      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003614:	f7fe f854 	bl	80016c0 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003622:	4293      	cmp	r3, r2
 8003624:	d902      	bls.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	77fb      	strb	r3, [r7, #31]
              break;
 800362a:	e004      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800362c:	f7ff fdde 	bl	80031ec <LL_RCC_LSE_IsReady>
 8003630:	4603      	mov	r3, r0
 8003632:	2b01      	cmp	r3, #1
 8003634:	d1ee      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003636:	7ffb      	ldrb	r3, [r7, #31]
 8003638:	77bb      	strb	r3, [r7, #30]
 800363a:	e001      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363c:	7ffb      	ldrb	r3, [r7, #31]
 800363e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d004      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fe2a 	bl	80032aa <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d004      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fe35 	bl	80032d6 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	d004      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff fe5d 	bl	800333c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	d004      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff fe52 	bl	800333c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d004      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff fe2a 	bl	8003302 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d004      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fe1f 	bl	8003302 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d022      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fe8d 	bl	80033f4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036e2:	d107      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80036e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036f2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036fc:	d10b      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3304      	adds	r3, #4
 8003702:	4618      	mov	r0, r3
 8003704:	f000 f8e3 	bl	80038ce <RCCEx_PLLSAI1_ConfigNQ>
 8003708:	4603      	mov	r3, r0
 800370a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800370c:	7ffb      	ldrb	r3, [r7, #31]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8003712:	7ffb      	ldrb	r3, [r7, #31]
 8003714:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800371e:	2b00      	cmp	r3, #0
 8003720:	d02b      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372a:	d008      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003734:	d003      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	2b00      	cmp	r3, #0
 800373c:	d105      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff fe2a 	bl	800339c <LL_RCC_SetRNGClockSource>
 8003748:	e00a      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	2000      	movs	r0, #0
 8003756:	f7ff fe21 	bl	800339c <LL_RCC_SetRNGClockSource>
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f7ff fe34 	bl	80033c8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003768:	d107      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800376a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003774:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003778:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003782:	2b00      	cmp	r3, #0
 8003784:	d022      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff fe3d 	bl	800340a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003798:	d107      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800379a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037b2:	d10b      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 f8e3 	bl	8003984 <RCCEx_PLLSAI1_ConfigNR>
 80037be:	4603      	mov	r3, r0
 80037c0:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80037c2:	7ffb      	ldrb	r3, [r7, #31]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80037c8:	7ffb      	ldrb	r3, [r7, #31]
 80037ca:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff fd26 	bl	800322e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff fd45 	bl	8003282 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fd2c 	bl	800325a <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8003802:	7fbb      	ldrb	r3, [r7, #30]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3720      	adds	r7, #32
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003810:	f7ff fcfe 	bl	8003210 <LL_RCC_MSI_EnablePLLMode>
}
 8003814:	bf00      	nop
 8003816:	bd80      	pop	{r7, pc}

08003818 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003824:	f7ff fe5b 	bl	80034de <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003828:	f7fd ff4a 	bl	80016c0 <HAL_GetTick>
 800382c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800382e:	e009      	b.n	8003844 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003830:	f7fd ff46 	bl	80016c0 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d902      	bls.n	8003844 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	73fb      	strb	r3, [r7, #15]
      break;
 8003842:	e004      	b.n	800384e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003844:	f7ff fe5a 	bl	80034fc <LL_RCC_PLLSAI1_IsReady>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d137      	bne.n	80038c4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003868:	4313      	orrs	r3, r2
 800386a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800386c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800387e:	4313      	orrs	r3, r2
 8003880:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003882:	f7ff fe1d 	bl	80034c0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003886:	f7fd ff1b 	bl	80016c0 <HAL_GetTick>
 800388a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800388c:	e009      	b.n	80038a2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800388e:	f7fd ff17 	bl	80016c0 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d902      	bls.n	80038a2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	73fb      	strb	r3, [r7, #15]
        break;
 80038a0:	e004      	b.n	80038ac <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80038a2:	f7ff fe2b 	bl	80034fc <LL_RCC_PLLSAI1_IsReady>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d1f0      	bne.n	800388e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d108      	bne.n	80038c4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80038b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038c0:	4313      	orrs	r3, r2
 80038c2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80038da:	f7ff fe00 	bl	80034de <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80038de:	f7fd feef 	bl	80016c0 <HAL_GetTick>
 80038e2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80038e4:	e009      	b.n	80038fa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038e6:	f7fd feeb 	bl	80016c0 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d902      	bls.n	80038fa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	73fb      	strb	r3, [r7, #15]
      break;
 80038f8:	e004      	b.n	8003904 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80038fa:	f7ff fdff 	bl	80034fc <LL_RCC_PLLSAI1_IsReady>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f0      	bne.n	80038e6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d137      	bne.n	800397a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800390a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	021b      	lsls	r3, r3, #8
 800391a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800391e:	4313      	orrs	r3, r2
 8003920:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003934:	4313      	orrs	r3, r2
 8003936:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003938:	f7ff fdc2 	bl	80034c0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800393c:	f7fd fec0 	bl	80016c0 <HAL_GetTick>
 8003940:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003942:	e009      	b.n	8003958 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003944:	f7fd febc 	bl	80016c0 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d902      	bls.n	8003958 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	73fb      	strb	r3, [r7, #15]
        break;
 8003956:	e004      	b.n	8003962 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003958:	f7ff fdd0 	bl	80034fc <LL_RCC_PLLSAI1_IsReady>
 800395c:	4603      	mov	r3, r0
 800395e:	2b01      	cmp	r3, #1
 8003960:	d1f0      	bne.n	8003944 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d108      	bne.n	800397a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003976:	4313      	orrs	r3, r2
 8003978:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800397a:	7bfb      	ldrb	r3, [r7, #15]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003990:	f7ff fda5 	bl	80034de <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003994:	f7fd fe94 	bl	80016c0 <HAL_GetTick>
 8003998:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800399a:	e009      	b.n	80039b0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800399c:	f7fd fe90 	bl	80016c0 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d902      	bls.n	80039b0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	73fb      	strb	r3, [r7, #15]
      break;
 80039ae:	e004      	b.n	80039ba <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039b0:	f7ff fda4 	bl	80034fc <LL_RCC_PLLSAI1_IsReady>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d137      	bne.n	8003a30 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80039c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039d4:	4313      	orrs	r3, r2
 80039d6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80039d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ea:	4313      	orrs	r3, r2
 80039ec:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80039ee:	f7ff fd67 	bl	80034c0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f2:	f7fd fe65 	bl	80016c0 <HAL_GetTick>
 80039f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80039f8:	e009      	b.n	8003a0e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039fa:	f7fd fe61 	bl	80016c0 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d902      	bls.n	8003a0e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	73fb      	strb	r3, [r7, #15]
        break;
 8003a0c:	e004      	b.n	8003a18 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a0e:	f7ff fd75 	bl	80034fc <LL_RCC_PLLSAI1_IsReady>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d1f0      	bne.n	80039fa <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d108      	bne.n	8003a30 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e049      	b.n	8003ae0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d106      	bne.n	8003a66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7fd fc59 	bl	8001318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	3304      	adds	r3, #4
 8003a76:	4619      	mov	r1, r3
 8003a78:	4610      	mov	r0, r2
 8003a7a:	f000 fcdd 	bl	8004438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d001      	beq.n	8003b00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e036      	b.n	8003b6e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68da      	ldr	r2, [r3, #12]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a17      	ldr	r2, [pc, #92]	; (8003b7c <HAL_TIM_Base_Start_IT+0x94>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d004      	beq.n	8003b2c <HAL_TIM_Base_Start_IT+0x44>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2a:	d115      	bne.n	8003b58 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	4b13      	ldr	r3, [pc, #76]	; (8003b80 <HAL_TIM_Base_Start_IT+0x98>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b06      	cmp	r3, #6
 8003b3c:	d015      	beq.n	8003b6a <HAL_TIM_Base_Start_IT+0x82>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b44:	d011      	beq.n	8003b6a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0201 	orr.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b56:	e008      	b.n	8003b6a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	e000      	b.n	8003b6c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	00010007 	.word	0x00010007

08003b84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e049      	b.n	8003c2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f841 	bl	8003c32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	f000 fc38 	bl	8004438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
	...

08003c48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d109      	bne.n	8003c6c <HAL_TIM_PWM_Start+0x24>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	bf14      	ite	ne
 8003c64:	2301      	movne	r3, #1
 8003c66:	2300      	moveq	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	e03c      	b.n	8003ce6 <HAL_TIM_PWM_Start+0x9e>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d109      	bne.n	8003c86 <HAL_TIM_PWM_Start+0x3e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	bf14      	ite	ne
 8003c7e:	2301      	movne	r3, #1
 8003c80:	2300      	moveq	r3, #0
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	e02f      	b.n	8003ce6 <HAL_TIM_PWM_Start+0x9e>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d109      	bne.n	8003ca0 <HAL_TIM_PWM_Start+0x58>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	bf14      	ite	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	2300      	moveq	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	e022      	b.n	8003ce6 <HAL_TIM_PWM_Start+0x9e>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2b0c      	cmp	r3, #12
 8003ca4:	d109      	bne.n	8003cba <HAL_TIM_PWM_Start+0x72>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	bf14      	ite	ne
 8003cb2:	2301      	movne	r3, #1
 8003cb4:	2300      	moveq	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	e015      	b.n	8003ce6 <HAL_TIM_PWM_Start+0x9e>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d109      	bne.n	8003cd4 <HAL_TIM_PWM_Start+0x8c>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	bf14      	ite	ne
 8003ccc:	2301      	movne	r3, #1
 8003cce:	2300      	moveq	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e008      	b.n	8003ce6 <HAL_TIM_PWM_Start+0x9e>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	bf14      	ite	ne
 8003ce0:	2301      	movne	r3, #1
 8003ce2:	2300      	moveq	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e079      	b.n	8003de2 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d104      	bne.n	8003cfe <HAL_TIM_PWM_Start+0xb6>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cfc:	e023      	b.n	8003d46 <HAL_TIM_PWM_Start+0xfe>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d104      	bne.n	8003d0e <HAL_TIM_PWM_Start+0xc6>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d0c:	e01b      	b.n	8003d46 <HAL_TIM_PWM_Start+0xfe>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d104      	bne.n	8003d1e <HAL_TIM_PWM_Start+0xd6>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d1c:	e013      	b.n	8003d46 <HAL_TIM_PWM_Start+0xfe>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b0c      	cmp	r3, #12
 8003d22:	d104      	bne.n	8003d2e <HAL_TIM_PWM_Start+0xe6>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d2c:	e00b      	b.n	8003d46 <HAL_TIM_PWM_Start+0xfe>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b10      	cmp	r3, #16
 8003d32:	d104      	bne.n	8003d3e <HAL_TIM_PWM_Start+0xf6>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d3c:	e003      	b.n	8003d46 <HAL_TIM_PWM_Start+0xfe>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2202      	movs	r2, #2
 8003d42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	6839      	ldr	r1, [r7, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fef0 	bl	8004b34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a24      	ldr	r2, [pc, #144]	; (8003dec <HAL_TIM_PWM_Start+0x1a4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d009      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x12a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a23      	ldr	r2, [pc, #140]	; (8003df0 <HAL_TIM_PWM_Start+0x1a8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x12a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a21      	ldr	r2, [pc, #132]	; (8003df4 <HAL_TIM_PWM_Start+0x1ac>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d101      	bne.n	8003d76 <HAL_TIM_PWM_Start+0x12e>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <HAL_TIM_PWM_Start+0x130>
 8003d76:	2300      	movs	r3, #0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d007      	beq.n	8003d8c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d8a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a16      	ldr	r2, [pc, #88]	; (8003dec <HAL_TIM_PWM_Start+0x1a4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d004      	beq.n	8003da0 <HAL_TIM_PWM_Start+0x158>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9e:	d115      	bne.n	8003dcc <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	4b14      	ldr	r3, [pc, #80]	; (8003df8 <HAL_TIM_PWM_Start+0x1b0>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b06      	cmp	r3, #6
 8003db0:	d015      	beq.n	8003dde <HAL_TIM_PWM_Start+0x196>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db8:	d011      	beq.n	8003dde <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0201 	orr.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dca:	e008      	b.n	8003dde <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	e000      	b.n	8003de0 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40012c00 	.word	0x40012c00
 8003df0:	40014400 	.word	0x40014400
 8003df4:	40014800 	.word	0x40014800
 8003df8:	00010007 	.word	0x00010007

08003dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d122      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d11b      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0202 	mvn.w	r2, #2
 8003e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fadc 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 8003e44:	e005      	b.n	8003e52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 face 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fadf 	bl	8004410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d122      	bne.n	8003eac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d11b      	bne.n	8003eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0204 	mvn.w	r2, #4
 8003e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fab2 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 8003e98:	e005      	b.n	8003ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 faa4 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fab5 	bl	8004410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d122      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d11b      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0208 	mvn.w	r2, #8
 8003ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2204      	movs	r2, #4
 8003ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fa88 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 8003eec:	e005      	b.n	8003efa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fa7a 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fa8b 	bl	8004410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	2b10      	cmp	r3, #16
 8003f0c:	d122      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b10      	cmp	r3, #16
 8003f1a:	d11b      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 0210 	mvn.w	r2, #16
 8003f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2208      	movs	r2, #8
 8003f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fa5e 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 8003f40:	e005      	b.n	8003f4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fa50 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fa61 	bl	8004410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d10e      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d107      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0201 	mvn.w	r2, #1
 8003f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fd f850 	bl	8001020 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8a:	2b80      	cmp	r3, #128	; 0x80
 8003f8c:	d10e      	bne.n	8003fac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f98:	2b80      	cmp	r3, #128	; 0x80
 8003f9a:	d107      	bne.n	8003fac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fee4 	bl	8004d74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fba:	d10e      	bne.n	8003fda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc6:	2b80      	cmp	r3, #128	; 0x80
 8003fc8:	d107      	bne.n	8003fda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 fed7 	bl	8004d88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe4:	2b40      	cmp	r3, #64	; 0x40
 8003fe6:	d10e      	bne.n	8004006 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff2:	2b40      	cmp	r3, #64	; 0x40
 8003ff4:	d107      	bne.n	8004006 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fa0f 	bl	8004424 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b20      	cmp	r3, #32
 8004012:	d10e      	bne.n	8004032 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0320 	and.w	r3, r3, #32
 800401e:	2b20      	cmp	r3, #32
 8004020:	d107      	bne.n	8004032 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f06f 0220 	mvn.w	r2, #32
 800402a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fe97 	bl	8004d60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004052:	2302      	movs	r3, #2
 8004054:	e0fd      	b.n	8004252 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b14      	cmp	r3, #20
 8004062:	f200 80f0 	bhi.w	8004246 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004066:	a201      	add	r2, pc, #4	; (adr r2, 800406c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406c:	080040c1 	.word	0x080040c1
 8004070:	08004247 	.word	0x08004247
 8004074:	08004247 	.word	0x08004247
 8004078:	08004247 	.word	0x08004247
 800407c:	08004101 	.word	0x08004101
 8004080:	08004247 	.word	0x08004247
 8004084:	08004247 	.word	0x08004247
 8004088:	08004247 	.word	0x08004247
 800408c:	08004143 	.word	0x08004143
 8004090:	08004247 	.word	0x08004247
 8004094:	08004247 	.word	0x08004247
 8004098:	08004247 	.word	0x08004247
 800409c:	08004183 	.word	0x08004183
 80040a0:	08004247 	.word	0x08004247
 80040a4:	08004247 	.word	0x08004247
 80040a8:	08004247 	.word	0x08004247
 80040ac:	080041c5 	.word	0x080041c5
 80040b0:	08004247 	.word	0x08004247
 80040b4:	08004247 	.word	0x08004247
 80040b8:	08004247 	.word	0x08004247
 80040bc:	08004205 	.word	0x08004205
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68b9      	ldr	r1, [r7, #8]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 fa1a 	bl	8004500 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699a      	ldr	r2, [r3, #24]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0208 	orr.w	r2, r2, #8
 80040da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699a      	ldr	r2, [r3, #24]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0204 	bic.w	r2, r2, #4
 80040ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6999      	ldr	r1, [r3, #24]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	619a      	str	r2, [r3, #24]
      break;
 80040fe:	e0a3      	b.n	8004248 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fa76 	bl	80045f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800411a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699a      	ldr	r2, [r3, #24]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800412a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6999      	ldr	r1, [r3, #24]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	021a      	lsls	r2, r3, #8
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	619a      	str	r2, [r3, #24]
      break;
 8004140:	e082      	b.n	8004248 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	4618      	mov	r0, r3
 800414a:	f000 facf 	bl	80046ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69da      	ldr	r2, [r3, #28]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0208 	orr.w	r2, r2, #8
 800415c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69da      	ldr	r2, [r3, #28]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0204 	bic.w	r2, r2, #4
 800416c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69d9      	ldr	r1, [r3, #28]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	61da      	str	r2, [r3, #28]
      break;
 8004180:	e062      	b.n	8004248 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fb27 	bl	80047dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69da      	ldr	r2, [r3, #28]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800419c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69da      	ldr	r2, [r3, #28]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69d9      	ldr	r1, [r3, #28]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	021a      	lsls	r2, r3, #8
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	61da      	str	r2, [r3, #28]
      break;
 80041c2:	e041      	b.n	8004248 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fb64 	bl	8004898 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0208 	orr.w	r2, r2, #8
 80041de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0204 	bic.w	r2, r2, #4
 80041ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004202:	e021      	b.n	8004248 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68b9      	ldr	r1, [r7, #8]
 800420a:	4618      	mov	r0, r3
 800420c:	f000 fb9c 	bl	8004948 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800421e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800422e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	021a      	lsls	r2, r3, #8
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004244:	e000      	b.n	8004248 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004246:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop

0800425c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <HAL_TIM_ConfigClockSource+0x18>
 8004270:	2302      	movs	r3, #2
 8004272:	e0b5      	b.n	80043e0 <HAL_TIM_ConfigClockSource+0x184>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004292:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004296:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800429e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b0:	d03e      	beq.n	8004330 <HAL_TIM_ConfigClockSource+0xd4>
 80042b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b6:	f200 8087 	bhi.w	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042be:	f000 8085 	beq.w	80043cc <HAL_TIM_ConfigClockSource+0x170>
 80042c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c6:	d87f      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042c8:	2b70      	cmp	r3, #112	; 0x70
 80042ca:	d01a      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0xa6>
 80042cc:	2b70      	cmp	r3, #112	; 0x70
 80042ce:	d87b      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042d0:	2b60      	cmp	r3, #96	; 0x60
 80042d2:	d050      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0x11a>
 80042d4:	2b60      	cmp	r3, #96	; 0x60
 80042d6:	d877      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042d8:	2b50      	cmp	r3, #80	; 0x50
 80042da:	d03c      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0xfa>
 80042dc:	2b50      	cmp	r3, #80	; 0x50
 80042de:	d873      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042e0:	2b40      	cmp	r3, #64	; 0x40
 80042e2:	d058      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0x13a>
 80042e4:	2b40      	cmp	r3, #64	; 0x40
 80042e6:	d86f      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042e8:	2b30      	cmp	r3, #48	; 0x30
 80042ea:	d064      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x15a>
 80042ec:	2b30      	cmp	r3, #48	; 0x30
 80042ee:	d86b      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	d060      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x15a>
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d867      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d05c      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x15a>
 80042fc:	2b10      	cmp	r3, #16
 80042fe:	d05a      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004300:	e062      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6899      	ldr	r1, [r3, #8]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f000 fbef 	bl	8004af4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004324:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	609a      	str	r2, [r3, #8]
      break;
 800432e:	e04e      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	6899      	ldr	r1, [r3, #8]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f000 fbd8 	bl	8004af4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004352:	609a      	str	r2, [r3, #8]
      break;
 8004354:	e03b      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6859      	ldr	r1, [r3, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	461a      	mov	r2, r3
 8004364:	f000 fb4a 	bl	80049fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2150      	movs	r1, #80	; 0x50
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fba3 	bl	8004aba <TIM_ITRx_SetConfig>
      break;
 8004374:	e02b      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6859      	ldr	r1, [r3, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	461a      	mov	r2, r3
 8004384:	f000 fb69 	bl	8004a5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2160      	movs	r1, #96	; 0x60
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fb93 	bl	8004aba <TIM_ITRx_SetConfig>
      break;
 8004394:	e01b      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6859      	ldr	r1, [r3, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	461a      	mov	r2, r3
 80043a4:	f000 fb2a 	bl	80049fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2140      	movs	r1, #64	; 0x40
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fb83 	bl	8004aba <TIM_ITRx_SetConfig>
      break;
 80043b4:	e00b      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4619      	mov	r1, r3
 80043c0:	4610      	mov	r0, r2
 80043c2:	f000 fb7a 	bl	8004aba <TIM_ITRx_SetConfig>
        break;
 80043c6:	e002      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x172>
      break;
 80043c8:	bf00      	nop
 80043ca:	e000      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x172>
      break;
 80043cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a2a      	ldr	r2, [pc, #168]	; (80044f4 <TIM_Base_SetConfig+0xbc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d003      	beq.n	8004458 <TIM_Base_SetConfig+0x20>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004456:	d108      	bne.n	800446a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a21      	ldr	r2, [pc, #132]	; (80044f4 <TIM_Base_SetConfig+0xbc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00b      	beq.n	800448a <TIM_Base_SetConfig+0x52>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004478:	d007      	beq.n	800448a <TIM_Base_SetConfig+0x52>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a1e      	ldr	r2, [pc, #120]	; (80044f8 <TIM_Base_SetConfig+0xc0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d003      	beq.n	800448a <TIM_Base_SetConfig+0x52>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a1d      	ldr	r2, [pc, #116]	; (80044fc <TIM_Base_SetConfig+0xc4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d108      	bne.n	800449c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a0c      	ldr	r2, [pc, #48]	; (80044f4 <TIM_Base_SetConfig+0xbc>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d007      	beq.n	80044d8 <TIM_Base_SetConfig+0xa0>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a0b      	ldr	r2, [pc, #44]	; (80044f8 <TIM_Base_SetConfig+0xc0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_Base_SetConfig+0xa0>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a0a      	ldr	r2, [pc, #40]	; (80044fc <TIM_Base_SetConfig+0xc4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d103      	bne.n	80044e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	615a      	str	r2, [r3, #20]
}
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40012c00 	.word	0x40012c00
 80044f8:	40014400 	.word	0x40014400
 80044fc:	40014800 	.word	0x40014800

08004500 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	f023 0201 	bic.w	r2, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800452e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 0303 	bic.w	r3, r3, #3
 800453a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f023 0302 	bic.w	r3, r3, #2
 800454c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a24      	ldr	r2, [pc, #144]	; (80045ec <TIM_OC1_SetConfig+0xec>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d007      	beq.n	8004570 <TIM_OC1_SetConfig+0x70>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a23      	ldr	r2, [pc, #140]	; (80045f0 <TIM_OC1_SetConfig+0xf0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d003      	beq.n	8004570 <TIM_OC1_SetConfig+0x70>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a22      	ldr	r2, [pc, #136]	; (80045f4 <TIM_OC1_SetConfig+0xf4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d10c      	bne.n	800458a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f023 0308 	bic.w	r3, r3, #8
 8004576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f023 0304 	bic.w	r3, r3, #4
 8004588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a17      	ldr	r2, [pc, #92]	; (80045ec <TIM_OC1_SetConfig+0xec>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d007      	beq.n	80045a2 <TIM_OC1_SetConfig+0xa2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a17      	ldr	r2, [pc, #92]	; (80045f4 <TIM_OC1_SetConfig+0xf4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d003      	beq.n	80045a2 <TIM_OC1_SetConfig+0xa2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a14      	ldr	r2, [pc, #80]	; (80045f0 <TIM_OC1_SetConfig+0xf0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d111      	bne.n	80045c6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	621a      	str	r2, [r3, #32]
}
 80045e0:	bf00      	nop
 80045e2:	371c      	adds	r7, #28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	40012c00 	.word	0x40012c00
 80045f0:	40014800 	.word	0x40014800
 80045f4:	40014400 	.word	0x40014400

080045f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f023 0210 	bic.w	r2, r3, #16
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800462a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f023 0320 	bic.w	r3, r3, #32
 8004646:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a22      	ldr	r2, [pc, #136]	; (80046e0 <TIM_OC2_SetConfig+0xe8>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d10d      	bne.n	8004678 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	4313      	orrs	r3, r2
 800466e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004676:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a19      	ldr	r2, [pc, #100]	; (80046e0 <TIM_OC2_SetConfig+0xe8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d007      	beq.n	8004690 <TIM_OC2_SetConfig+0x98>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a18      	ldr	r2, [pc, #96]	; (80046e4 <TIM_OC2_SetConfig+0xec>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d003      	beq.n	8004690 <TIM_OC2_SetConfig+0x98>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a17      	ldr	r2, [pc, #92]	; (80046e8 <TIM_OC2_SetConfig+0xf0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d113      	bne.n	80046b8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004696:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800469e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	621a      	str	r2, [r3, #32]
}
 80046d2:	bf00      	nop
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40012c00 	.word	0x40012c00
 80046e4:	40014400 	.word	0x40014400
 80046e8:	40014800 	.word	0x40014800

080046ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800471a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0303 	bic.w	r3, r3, #3
 8004726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	021b      	lsls	r3, r3, #8
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a21      	ldr	r2, [pc, #132]	; (80047d0 <TIM_OC3_SetConfig+0xe4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d10d      	bne.n	800476a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	021b      	lsls	r3, r3, #8
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a18      	ldr	r2, [pc, #96]	; (80047d0 <TIM_OC3_SetConfig+0xe4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d007      	beq.n	8004782 <TIM_OC3_SetConfig+0x96>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a17      	ldr	r2, [pc, #92]	; (80047d4 <TIM_OC3_SetConfig+0xe8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d003      	beq.n	8004782 <TIM_OC3_SetConfig+0x96>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a16      	ldr	r2, [pc, #88]	; (80047d8 <TIM_OC3_SetConfig+0xec>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d113      	bne.n	80047aa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	621a      	str	r2, [r3, #32]
}
 80047c4:	bf00      	nop
 80047c6:	371c      	adds	r7, #28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	40012c00 	.word	0x40012c00
 80047d4:	40014400 	.word	0x40014400
 80047d8:	40014800 	.word	0x40014800

080047dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800482a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	031b      	lsls	r3, r3, #12
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a14      	ldr	r2, [pc, #80]	; (800488c <TIM_OC4_SetConfig+0xb0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d007      	beq.n	8004850 <TIM_OC4_SetConfig+0x74>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a13      	ldr	r2, [pc, #76]	; (8004890 <TIM_OC4_SetConfig+0xb4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d003      	beq.n	8004850 <TIM_OC4_SetConfig+0x74>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a12      	ldr	r2, [pc, #72]	; (8004894 <TIM_OC4_SetConfig+0xb8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d109      	bne.n	8004864 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004856:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	019b      	lsls	r3, r3, #6
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	621a      	str	r2, [r3, #32]
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40012c00 	.word	0x40012c00
 8004890:	40014400 	.word	0x40014400
 8004894:	40014800 	.word	0x40014800

08004898 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80048dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	041b      	lsls	r3, r3, #16
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a13      	ldr	r2, [pc, #76]	; (800493c <TIM_OC5_SetConfig+0xa4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d007      	beq.n	8004902 <TIM_OC5_SetConfig+0x6a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a12      	ldr	r2, [pc, #72]	; (8004940 <TIM_OC5_SetConfig+0xa8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d003      	beq.n	8004902 <TIM_OC5_SetConfig+0x6a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a11      	ldr	r2, [pc, #68]	; (8004944 <TIM_OC5_SetConfig+0xac>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d109      	bne.n	8004916 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004908:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	021b      	lsls	r3, r3, #8
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4313      	orrs	r3, r2
 8004914:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	621a      	str	r2, [r3, #32]
}
 8004930:	bf00      	nop
 8004932:	371c      	adds	r7, #28
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	40012c00 	.word	0x40012c00
 8004940:	40014400 	.word	0x40014400
 8004944:	40014800 	.word	0x40014800

08004948 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800497a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800498e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	051b      	lsls	r3, r3, #20
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a14      	ldr	r2, [pc, #80]	; (80049f0 <TIM_OC6_SetConfig+0xa8>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d007      	beq.n	80049b4 <TIM_OC6_SetConfig+0x6c>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a13      	ldr	r2, [pc, #76]	; (80049f4 <TIM_OC6_SetConfig+0xac>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d003      	beq.n	80049b4 <TIM_OC6_SetConfig+0x6c>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a12      	ldr	r2, [pc, #72]	; (80049f8 <TIM_OC6_SetConfig+0xb0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d109      	bne.n	80049c8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	029b      	lsls	r3, r3, #10
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	621a      	str	r2, [r3, #32]
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40012c00 	.word	0x40012c00
 80049f4:	40014400 	.word	0x40014400
 80049f8:	40014800 	.word	0x40014800

080049fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	f023 0201 	bic.w	r2, r3, #1
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f023 030a 	bic.w	r3, r3, #10
 8004a38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	621a      	str	r2, [r3, #32]
}
 8004a4e:	bf00      	nop
 8004a50:	371c      	adds	r7, #28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b087      	sub	sp, #28
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	60f8      	str	r0, [r7, #12]
 8004a62:	60b9      	str	r1, [r7, #8]
 8004a64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f023 0210 	bic.w	r2, r3, #16
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	031b      	lsls	r3, r3, #12
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	621a      	str	r2, [r3, #32]
}
 8004aae:	bf00      	nop
 8004ab0:	371c      	adds	r7, #28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b085      	sub	sp, #20
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f043 0307 	orr.w	r3, r3, #7
 8004ae0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	609a      	str	r2, [r3, #8]
}
 8004ae8:	bf00      	nop
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	021a      	lsls	r2, r3, #8
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	609a      	str	r2, [r3, #8]
}
 8004b28:	bf00      	nop
 8004b2a:	371c      	adds	r7, #28
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 031f 	and.w	r3, r3, #31
 8004b46:	2201      	movs	r2, #1
 8004b48:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a1a      	ldr	r2, [r3, #32]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	43db      	mvns	r3, r3
 8004b56:	401a      	ands	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a1a      	ldr	r2, [r3, #32]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f003 031f 	and.w	r3, r3, #31
 8004b66:	6879      	ldr	r1, [r7, #4]
 8004b68:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	621a      	str	r2, [r3, #32]
}
 8004b72:	bf00      	nop
 8004b74:	371c      	adds	r7, #28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
	...

08004b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d101      	bne.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b94:	2302      	movs	r3, #2
 8004b96:	e04a      	b.n	8004c2e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a1f      	ldr	r2, [pc, #124]	; (8004c3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d108      	bne.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004bc8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a12      	ldr	r2, [pc, #72]	; (8004c3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d004      	beq.n	8004c02 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c00:	d10c      	bne.n	8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40012c00 	.word	0x40012c00

08004c40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e078      	b.n	8004d4e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	041b      	lsls	r3, r3, #16
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a20      	ldr	r2, [pc, #128]	; (8004d5c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d106      	bne.n	8004cee <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1a      	ldr	r2, [pc, #104]	; (8004d5c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d121      	bne.n	8004d3c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	051b      	lsls	r3, r3, #20
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a0c      	ldr	r2, [pc, #48]	; (8004d5c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d106      	bne.n	8004d3c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40012c00 	.word	0x40012c00

08004d60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <LL_RCC_GetUSARTClockSource>:
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4013      	ands	r3, r2
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <LL_RCC_GetLPUARTClockSource>:
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4013      	ands	r3, r2
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e042      	b.n	8004e74 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d106      	bne.n	8004e06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7fc fad1 	bl	80013a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2224      	movs	r2, #36	; 0x24
 8004e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0201 	bic.w	r2, r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f82c 	bl	8004e7c <UART_SetConfig>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d101      	bne.n	8004e2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e022      	b.n	8004e74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fa26 	bl	8005288 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 faad 	bl	80053cc <UART_CheckIdleState>
 8004e72:	4603      	mov	r3, r0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e7c:	b5b0      	push	{r4, r5, r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4ba3      	ldr	r3, [pc, #652]	; (8005134 <UART_SetConfig+0x2b8>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	69f9      	ldr	r1, [r7, #28]
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a98      	ldr	r2, [pc, #608]	; (8005138 <UART_SetConfig+0x2bc>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d004      	beq.n	8004ee4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004eee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6812      	ldr	r2, [r2, #0]
 8004ef6:	69f9      	ldr	r1, [r7, #28]
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	f023 010f 	bic.w	r1, r3, #15
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a89      	ldr	r2, [pc, #548]	; (800513c <UART_SetConfig+0x2c0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d120      	bne.n	8004f5e <UART_SetConfig+0xe2>
 8004f1c:	2003      	movs	r0, #3
 8004f1e:	f7ff ff3d 	bl	8004d9c <LL_RCC_GetUSARTClockSource>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d817      	bhi.n	8004f58 <UART_SetConfig+0xdc>
 8004f28:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <UART_SetConfig+0xb4>)
 8004f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2e:	bf00      	nop
 8004f30:	08004f41 	.word	0x08004f41
 8004f34:	08004f4d 	.word	0x08004f4d
 8004f38:	08004f47 	.word	0x08004f47
 8004f3c:	08004f53 	.word	0x08004f53
 8004f40:	2301      	movs	r3, #1
 8004f42:	76fb      	strb	r3, [r7, #27]
 8004f44:	e038      	b.n	8004fb8 <UART_SetConfig+0x13c>
 8004f46:	2302      	movs	r3, #2
 8004f48:	76fb      	strb	r3, [r7, #27]
 8004f4a:	e035      	b.n	8004fb8 <UART_SetConfig+0x13c>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	76fb      	strb	r3, [r7, #27]
 8004f50:	e032      	b.n	8004fb8 <UART_SetConfig+0x13c>
 8004f52:	2308      	movs	r3, #8
 8004f54:	76fb      	strb	r3, [r7, #27]
 8004f56:	e02f      	b.n	8004fb8 <UART_SetConfig+0x13c>
 8004f58:	2310      	movs	r3, #16
 8004f5a:	76fb      	strb	r3, [r7, #27]
 8004f5c:	e02c      	b.n	8004fb8 <UART_SetConfig+0x13c>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a75      	ldr	r2, [pc, #468]	; (8005138 <UART_SetConfig+0x2bc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d125      	bne.n	8004fb4 <UART_SetConfig+0x138>
 8004f68:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004f6c:	f7ff ff26 	bl	8004dbc <LL_RCC_GetLPUARTClockSource>
 8004f70:	4603      	mov	r3, r0
 8004f72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f76:	d017      	beq.n	8004fa8 <UART_SetConfig+0x12c>
 8004f78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f7c:	d817      	bhi.n	8004fae <UART_SetConfig+0x132>
 8004f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f82:	d00b      	beq.n	8004f9c <UART_SetConfig+0x120>
 8004f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f88:	d811      	bhi.n	8004fae <UART_SetConfig+0x132>
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <UART_SetConfig+0x11a>
 8004f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f92:	d006      	beq.n	8004fa2 <UART_SetConfig+0x126>
 8004f94:	e00b      	b.n	8004fae <UART_SetConfig+0x132>
 8004f96:	2300      	movs	r3, #0
 8004f98:	76fb      	strb	r3, [r7, #27]
 8004f9a:	e00d      	b.n	8004fb8 <UART_SetConfig+0x13c>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	76fb      	strb	r3, [r7, #27]
 8004fa0:	e00a      	b.n	8004fb8 <UART_SetConfig+0x13c>
 8004fa2:	2304      	movs	r3, #4
 8004fa4:	76fb      	strb	r3, [r7, #27]
 8004fa6:	e007      	b.n	8004fb8 <UART_SetConfig+0x13c>
 8004fa8:	2308      	movs	r3, #8
 8004faa:	76fb      	strb	r3, [r7, #27]
 8004fac:	e004      	b.n	8004fb8 <UART_SetConfig+0x13c>
 8004fae:	2310      	movs	r3, #16
 8004fb0:	76fb      	strb	r3, [r7, #27]
 8004fb2:	e001      	b.n	8004fb8 <UART_SetConfig+0x13c>
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a5e      	ldr	r2, [pc, #376]	; (8005138 <UART_SetConfig+0x2bc>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	f040 808b 	bne.w	80050da <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fc4:	7efb      	ldrb	r3, [r7, #27]
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d823      	bhi.n	8005012 <UART_SetConfig+0x196>
 8004fca:	a201      	add	r2, pc, #4	; (adr r2, 8004fd0 <UART_SetConfig+0x154>)
 8004fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd0:	08004ff5 	.word	0x08004ff5
 8004fd4:	08005013 	.word	0x08005013
 8004fd8:	08004ffd 	.word	0x08004ffd
 8004fdc:	08005013 	.word	0x08005013
 8004fe0:	08005003 	.word	0x08005003
 8004fe4:	08005013 	.word	0x08005013
 8004fe8:	08005013 	.word	0x08005013
 8004fec:	08005013 	.word	0x08005013
 8004ff0:	0800500b 	.word	0x0800500b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ff4:	f7fe f804 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 8004ff8:	6178      	str	r0, [r7, #20]
        break;
 8004ffa:	e00f      	b.n	800501c <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ffc:	4b50      	ldr	r3, [pc, #320]	; (8005140 <UART_SetConfig+0x2c4>)
 8004ffe:	617b      	str	r3, [r7, #20]
        break;
 8005000:	e00c      	b.n	800501c <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005002:	f7fd ff7d 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8005006:	6178      	str	r0, [r7, #20]
        break;
 8005008:	e008      	b.n	800501c <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800500a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500e:	617b      	str	r3, [r7, #20]
        break;
 8005010:	e004      	b.n	800501c <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	76bb      	strb	r3, [r7, #26]
        break;
 800501a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 811a 	beq.w	8005258 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	4a46      	ldr	r2, [pc, #280]	; (8005144 <UART_SetConfig+0x2c8>)
 800502a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800502e:	461a      	mov	r2, r3
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	fbb3 f3f2 	udiv	r3, r3, r2
 8005036:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	4613      	mov	r3, r2
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	4413      	add	r3, r2
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	429a      	cmp	r2, r3
 8005046:	d305      	bcc.n	8005054 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	429a      	cmp	r2, r3
 8005052:	d902      	bls.n	800505a <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	76bb      	strb	r3, [r7, #26]
 8005058:	e0fe      	b.n	8005258 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	4618      	mov	r0, r3
 800505e:	f04f 0100 	mov.w	r1, #0
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	4a37      	ldr	r2, [pc, #220]	; (8005144 <UART_SetConfig+0x2c8>)
 8005068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800506c:	b29a      	uxth	r2, r3
 800506e:	f04f 0300 	mov.w	r3, #0
 8005072:	f7fb fbdb 	bl	800082c <__aeabi_uldivmod>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4610      	mov	r0, r2
 800507c:	4619      	mov	r1, r3
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	020b      	lsls	r3, r1, #8
 8005088:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800508c:	0202      	lsls	r2, r0, #8
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	6849      	ldr	r1, [r1, #4]
 8005092:	0849      	lsrs	r1, r1, #1
 8005094:	4608      	mov	r0, r1
 8005096:	f04f 0100 	mov.w	r1, #0
 800509a:	1814      	adds	r4, r2, r0
 800509c:	eb43 0501 	adc.w	r5, r3, r1
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	461a      	mov	r2, r3
 80050a6:	f04f 0300 	mov.w	r3, #0
 80050aa:	4620      	mov	r0, r4
 80050ac:	4629      	mov	r1, r5
 80050ae:	f7fb fbbd 	bl	800082c <__aeabi_uldivmod>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4613      	mov	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050c0:	d308      	bcc.n	80050d4 <UART_SetConfig+0x258>
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050c8:	d204      	bcs.n	80050d4 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	60da      	str	r2, [r3, #12]
 80050d2:	e0c1      	b.n	8005258 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	76bb      	strb	r3, [r7, #26]
 80050d8:	e0be      	b.n	8005258 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e2:	d16a      	bne.n	80051ba <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80050e4:	7efb      	ldrb	r3, [r7, #27]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	2b07      	cmp	r3, #7
 80050ea:	d82d      	bhi.n	8005148 <UART_SetConfig+0x2cc>
 80050ec:	a201      	add	r2, pc, #4	; (adr r2, 80050f4 <UART_SetConfig+0x278>)
 80050ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f2:	bf00      	nop
 80050f4:	08005115 	.word	0x08005115
 80050f8:	0800511d 	.word	0x0800511d
 80050fc:	08005149 	.word	0x08005149
 8005100:	08005123 	.word	0x08005123
 8005104:	08005149 	.word	0x08005149
 8005108:	08005149 	.word	0x08005149
 800510c:	08005149 	.word	0x08005149
 8005110:	0800512b 	.word	0x0800512b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005114:	f7fd ff8a 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 8005118:	6178      	str	r0, [r7, #20]
        break;
 800511a:	e01a      	b.n	8005152 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800511c:	4b08      	ldr	r3, [pc, #32]	; (8005140 <UART_SetConfig+0x2c4>)
 800511e:	617b      	str	r3, [r7, #20]
        break;
 8005120:	e017      	b.n	8005152 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005122:	f7fd feed 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8005126:	6178      	str	r0, [r7, #20]
        break;
 8005128:	e013      	b.n	8005152 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800512a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800512e:	617b      	str	r3, [r7, #20]
        break;
 8005130:	e00f      	b.n	8005152 <UART_SetConfig+0x2d6>
 8005132:	bf00      	nop
 8005134:	cfff69f3 	.word	0xcfff69f3
 8005138:	40008000 	.word	0x40008000
 800513c:	40013800 	.word	0x40013800
 8005140:	00f42400 	.word	0x00f42400
 8005144:	080063f4 	.word	0x080063f4
      default:
        pclk = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	76bb      	strb	r3, [r7, #26]
        break;
 8005150:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d07f      	beq.n	8005258 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	4a48      	ldr	r2, [pc, #288]	; (8005280 <UART_SetConfig+0x404>)
 800515e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005162:	461a      	mov	r2, r3
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	fbb3 f3f2 	udiv	r3, r3, r2
 800516a:	005a      	lsls	r2, r3, #1
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	085b      	lsrs	r3, r3, #1
 8005172:	441a      	add	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	fbb2 f3f3 	udiv	r3, r2, r3
 800517c:	b29b      	uxth	r3, r3
 800517e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2b0f      	cmp	r3, #15
 8005184:	d916      	bls.n	80051b4 <UART_SetConfig+0x338>
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518c:	d212      	bcs.n	80051b4 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	b29b      	uxth	r3, r3
 8005192:	f023 030f 	bic.w	r3, r3, #15
 8005196:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	085b      	lsrs	r3, r3, #1
 800519c:	b29b      	uxth	r3, r3
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	89fb      	ldrh	r3, [r7, #14]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	89fa      	ldrh	r2, [r7, #14]
 80051b0:	60da      	str	r2, [r3, #12]
 80051b2:	e051      	b.n	8005258 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	76bb      	strb	r3, [r7, #26]
 80051b8:	e04e      	b.n	8005258 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051ba:	7efb      	ldrb	r3, [r7, #27]
 80051bc:	3b01      	subs	r3, #1
 80051be:	2b07      	cmp	r3, #7
 80051c0:	d821      	bhi.n	8005206 <UART_SetConfig+0x38a>
 80051c2:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <UART_SetConfig+0x34c>)
 80051c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c8:	080051e9 	.word	0x080051e9
 80051cc:	080051f1 	.word	0x080051f1
 80051d0:	08005207 	.word	0x08005207
 80051d4:	080051f7 	.word	0x080051f7
 80051d8:	08005207 	.word	0x08005207
 80051dc:	08005207 	.word	0x08005207
 80051e0:	08005207 	.word	0x08005207
 80051e4:	080051ff 	.word	0x080051ff
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051e8:	f7fd ff20 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 80051ec:	6178      	str	r0, [r7, #20]
        break;
 80051ee:	e00f      	b.n	8005210 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051f0:	4b24      	ldr	r3, [pc, #144]	; (8005284 <UART_SetConfig+0x408>)
 80051f2:	617b      	str	r3, [r7, #20]
        break;
 80051f4:	e00c      	b.n	8005210 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051f6:	f7fd fe83 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 80051fa:	6178      	str	r0, [r7, #20]
        break;
 80051fc:	e008      	b.n	8005210 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005202:	617b      	str	r3, [r7, #20]
        break;
 8005204:	e004      	b.n	8005210 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	76bb      	strb	r3, [r7, #26]
        break;
 800520e:	bf00      	nop
    }

    if (pclk != 0U)
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d020      	beq.n	8005258 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	4a19      	ldr	r2, [pc, #100]	; (8005280 <UART_SetConfig+0x404>)
 800521c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005220:	461a      	mov	r2, r3
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	fbb3 f2f2 	udiv	r2, r3, r2
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	085b      	lsrs	r3, r3, #1
 800522e:	441a      	add	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	fbb2 f3f3 	udiv	r3, r2, r3
 8005238:	b29b      	uxth	r3, r3
 800523a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b0f      	cmp	r3, #15
 8005240:	d908      	bls.n	8005254 <UART_SetConfig+0x3d8>
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005248:	d204      	bcs.n	8005254 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	60da      	str	r2, [r3, #12]
 8005252:	e001      	b.n	8005258 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005274:	7ebb      	ldrb	r3, [r7, #26]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3720      	adds	r7, #32
 800527a:	46bd      	mov	sp, r7
 800527c:	bdb0      	pop	{r4, r5, r7, pc}
 800527e:	bf00      	nop
 8005280:	080063f4 	.word	0x080063f4
 8005284:	00f42400 	.word	0x00f42400

08005288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01a      	beq.n	800539e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005386:	d10a      	bne.n	800539e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	605a      	str	r2, [r3, #4]
  }
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053dc:	f7fc f970 	bl	80016c0 <HAL_GetTick>
 80053e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d10e      	bne.n	800540e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f82f 	bl	8005462 <UART_WaitOnFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e025      	b.n	800545a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b04      	cmp	r3, #4
 800541a:	d10e      	bne.n	800543a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800541c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f819 	bl	8005462 <UART_WaitOnFlagUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e00f      	b.n	800545a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	603b      	str	r3, [r7, #0]
 800546e:	4613      	mov	r3, r2
 8005470:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005472:	e062      	b.n	800553a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547a:	d05e      	beq.n	800553a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547c:	f7fc f920 	bl	80016c0 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	429a      	cmp	r2, r3
 800548a:	d302      	bcc.n	8005492 <UART_WaitOnFlagUntilTimeout+0x30>
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d11d      	bne.n	80054ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0201 	bic.w	r2, r2, #1
 80054b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2220      	movs	r2, #32
 80054be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e045      	b.n	800555a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d02e      	beq.n	800553a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ea:	d126      	bne.n	800553a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005504:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0201 	bic.w	r2, r2, #1
 8005514:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2220      	movs	r2, #32
 8005522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e00f      	b.n	800555a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4013      	ands	r3, r2
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	429a      	cmp	r2, r3
 8005548:	bf0c      	ite	eq
 800554a:	2301      	moveq	r3, #1
 800554c:	2300      	movne	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	461a      	mov	r2, r3
 8005552:	79fb      	ldrb	r3, [r7, #7]
 8005554:	429a      	cmp	r2, r3
 8005556:	d08d      	beq.n	8005474 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005562:	b480      	push	{r7}
 8005564:	b085      	sub	sp, #20
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005570:	2b01      	cmp	r3, #1
 8005572:	d101      	bne.n	8005578 <HAL_UARTEx_DisableFifoMode+0x16>
 8005574:	2302      	movs	r3, #2
 8005576:	e027      	b.n	80055c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2224      	movs	r2, #36	; 0x24
 8005584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0201 	bic.w	r2, r2, #1
 800559e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80055a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e02d      	b.n	8005648 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2224      	movs	r2, #36	; 0x24
 80055f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0201 	bic.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f84f 	bl	80056cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005664:	2302      	movs	r3, #2
 8005666:	e02d      	b.n	80056c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2224      	movs	r2, #36	; 0x24
 8005674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0201 	bic.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f811 	bl	80056cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d108      	bne.n	80056ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056ec:	e031      	b.n	8005752 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80056ee:	2308      	movs	r3, #8
 80056f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056f2:	2308      	movs	r3, #8
 80056f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	0e5b      	lsrs	r3, r3, #25
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	0f5b      	lsrs	r3, r3, #29
 800570e:	b2db      	uxtb	r3, r3
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005716:	7bbb      	ldrb	r3, [r7, #14]
 8005718:	7b3a      	ldrb	r2, [r7, #12]
 800571a:	4911      	ldr	r1, [pc, #68]	; (8005760 <UARTEx_SetNbDataToProcess+0x94>)
 800571c:	5c8a      	ldrb	r2, [r1, r2]
 800571e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005722:	7b3a      	ldrb	r2, [r7, #12]
 8005724:	490f      	ldr	r1, [pc, #60]	; (8005764 <UARTEx_SetNbDataToProcess+0x98>)
 8005726:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005728:	fb93 f3f2 	sdiv	r3, r3, r2
 800572c:	b29a      	uxth	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	7b7a      	ldrb	r2, [r7, #13]
 8005738:	4909      	ldr	r1, [pc, #36]	; (8005760 <UARTEx_SetNbDataToProcess+0x94>)
 800573a:	5c8a      	ldrb	r2, [r1, r2]
 800573c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005740:	7b7a      	ldrb	r2, [r7, #13]
 8005742:	4908      	ldr	r1, [pc, #32]	; (8005764 <UARTEx_SetNbDataToProcess+0x98>)
 8005744:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005746:	fb93 f3f2 	sdiv	r3, r3, r2
 800574a:	b29a      	uxth	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	0800640c 	.word	0x0800640c
 8005764:	08006414 	.word	0x08006414

08005768 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005770:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005774:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800577c:	b29a      	uxth	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	b29b      	uxth	r3, r3
 8005782:	43db      	mvns	r3, r3
 8005784:	b29b      	uxth	r3, r3
 8005786:	4013      	ands	r3, r2
 8005788:	b29a      	uxth	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800579e:	b084      	sub	sp, #16
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	f107 0014 	add.w	r0, r7, #20
 80057ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	b004      	add	sp, #16
 80057de:	4770      	bx	lr

080057e0 <__libc_init_array>:
 80057e0:	b570      	push	{r4, r5, r6, lr}
 80057e2:	4d0d      	ldr	r5, [pc, #52]	; (8005818 <__libc_init_array+0x38>)
 80057e4:	4c0d      	ldr	r4, [pc, #52]	; (800581c <__libc_init_array+0x3c>)
 80057e6:	1b64      	subs	r4, r4, r5
 80057e8:	10a4      	asrs	r4, r4, #2
 80057ea:	2600      	movs	r6, #0
 80057ec:	42a6      	cmp	r6, r4
 80057ee:	d109      	bne.n	8005804 <__libc_init_array+0x24>
 80057f0:	4d0b      	ldr	r5, [pc, #44]	; (8005820 <__libc_init_array+0x40>)
 80057f2:	4c0c      	ldr	r4, [pc, #48]	; (8005824 <__libc_init_array+0x44>)
 80057f4:	f000 fd8c 	bl	8006310 <_init>
 80057f8:	1b64      	subs	r4, r4, r5
 80057fa:	10a4      	asrs	r4, r4, #2
 80057fc:	2600      	movs	r6, #0
 80057fe:	42a6      	cmp	r6, r4
 8005800:	d105      	bne.n	800580e <__libc_init_array+0x2e>
 8005802:	bd70      	pop	{r4, r5, r6, pc}
 8005804:	f855 3b04 	ldr.w	r3, [r5], #4
 8005808:	4798      	blx	r3
 800580a:	3601      	adds	r6, #1
 800580c:	e7ee      	b.n	80057ec <__libc_init_array+0xc>
 800580e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005812:	4798      	blx	r3
 8005814:	3601      	adds	r6, #1
 8005816:	e7f2      	b.n	80057fe <__libc_init_array+0x1e>
 8005818:	080067f4 	.word	0x080067f4
 800581c:	080067f4 	.word	0x080067f4
 8005820:	080067f4 	.word	0x080067f4
 8005824:	080067f8 	.word	0x080067f8

08005828 <memset>:
 8005828:	4402      	add	r2, r0
 800582a:	4603      	mov	r3, r0
 800582c:	4293      	cmp	r3, r2
 800582e:	d100      	bne.n	8005832 <memset+0xa>
 8005830:	4770      	bx	lr
 8005832:	f803 1b01 	strb.w	r1, [r3], #1
 8005836:	e7f9      	b.n	800582c <memset+0x4>

08005838 <sinf>:
 8005838:	ee10 3a10 	vmov	r3, s0
 800583c:	b507      	push	{r0, r1, r2, lr}
 800583e:	4a1d      	ldr	r2, [pc, #116]	; (80058b4 <sinf+0x7c>)
 8005840:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005844:	4293      	cmp	r3, r2
 8005846:	dc05      	bgt.n	8005854 <sinf+0x1c>
 8005848:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80058b8 <sinf+0x80>
 800584c:	2000      	movs	r0, #0
 800584e:	f000 fc5b 	bl	8006108 <__kernel_sinf>
 8005852:	e004      	b.n	800585e <sinf+0x26>
 8005854:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005858:	db04      	blt.n	8005864 <sinf+0x2c>
 800585a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800585e:	b003      	add	sp, #12
 8005860:	f85d fb04 	ldr.w	pc, [sp], #4
 8005864:	4668      	mov	r0, sp
 8005866:	f000 f829 	bl	80058bc <__ieee754_rem_pio2f>
 800586a:	f000 0003 	and.w	r0, r0, #3
 800586e:	2801      	cmp	r0, #1
 8005870:	d008      	beq.n	8005884 <sinf+0x4c>
 8005872:	2802      	cmp	r0, #2
 8005874:	d00d      	beq.n	8005892 <sinf+0x5a>
 8005876:	b9b0      	cbnz	r0, 80058a6 <sinf+0x6e>
 8005878:	eddd 0a01 	vldr	s1, [sp, #4]
 800587c:	ed9d 0a00 	vldr	s0, [sp]
 8005880:	2001      	movs	r0, #1
 8005882:	e7e4      	b.n	800584e <sinf+0x16>
 8005884:	eddd 0a01 	vldr	s1, [sp, #4]
 8005888:	ed9d 0a00 	vldr	s0, [sp]
 800588c:	f000 f952 	bl	8005b34 <__kernel_cosf>
 8005890:	e7e5      	b.n	800585e <sinf+0x26>
 8005892:	eddd 0a01 	vldr	s1, [sp, #4]
 8005896:	ed9d 0a00 	vldr	s0, [sp]
 800589a:	2001      	movs	r0, #1
 800589c:	f000 fc34 	bl	8006108 <__kernel_sinf>
 80058a0:	eeb1 0a40 	vneg.f32	s0, s0
 80058a4:	e7db      	b.n	800585e <sinf+0x26>
 80058a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80058aa:	ed9d 0a00 	vldr	s0, [sp]
 80058ae:	f000 f941 	bl	8005b34 <__kernel_cosf>
 80058b2:	e7f5      	b.n	80058a0 <sinf+0x68>
 80058b4:	3f490fd8 	.word	0x3f490fd8
 80058b8:	00000000 	.word	0x00000000

080058bc <__ieee754_rem_pio2f>:
 80058bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058be:	ee10 6a10 	vmov	r6, s0
 80058c2:	4b8e      	ldr	r3, [pc, #568]	; (8005afc <__ieee754_rem_pio2f+0x240>)
 80058c4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80058c8:	429d      	cmp	r5, r3
 80058ca:	b087      	sub	sp, #28
 80058cc:	eef0 7a40 	vmov.f32	s15, s0
 80058d0:	4604      	mov	r4, r0
 80058d2:	dc05      	bgt.n	80058e0 <__ieee754_rem_pio2f+0x24>
 80058d4:	2300      	movs	r3, #0
 80058d6:	ed80 0a00 	vstr	s0, [r0]
 80058da:	6043      	str	r3, [r0, #4]
 80058dc:	2000      	movs	r0, #0
 80058de:	e01a      	b.n	8005916 <__ieee754_rem_pio2f+0x5a>
 80058e0:	4b87      	ldr	r3, [pc, #540]	; (8005b00 <__ieee754_rem_pio2f+0x244>)
 80058e2:	429d      	cmp	r5, r3
 80058e4:	dc46      	bgt.n	8005974 <__ieee754_rem_pio2f+0xb8>
 80058e6:	2e00      	cmp	r6, #0
 80058e8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8005b04 <__ieee754_rem_pio2f+0x248>
 80058ec:	4b86      	ldr	r3, [pc, #536]	; (8005b08 <__ieee754_rem_pio2f+0x24c>)
 80058ee:	f025 050f 	bic.w	r5, r5, #15
 80058f2:	dd1f      	ble.n	8005934 <__ieee754_rem_pio2f+0x78>
 80058f4:	429d      	cmp	r5, r3
 80058f6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80058fa:	d00e      	beq.n	800591a <__ieee754_rem_pio2f+0x5e>
 80058fc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8005b0c <__ieee754_rem_pio2f+0x250>
 8005900:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8005904:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005908:	ed80 0a00 	vstr	s0, [r0]
 800590c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005910:	2001      	movs	r0, #1
 8005912:	edc4 7a01 	vstr	s15, [r4, #4]
 8005916:	b007      	add	sp, #28
 8005918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800591a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8005b10 <__ieee754_rem_pio2f+0x254>
 800591e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8005b14 <__ieee754_rem_pio2f+0x258>
 8005922:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005926:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800592a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800592e:	edc0 6a00 	vstr	s13, [r0]
 8005932:	e7eb      	b.n	800590c <__ieee754_rem_pio2f+0x50>
 8005934:	429d      	cmp	r5, r3
 8005936:	ee77 7a80 	vadd.f32	s15, s15, s0
 800593a:	d00e      	beq.n	800595a <__ieee754_rem_pio2f+0x9e>
 800593c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8005b0c <__ieee754_rem_pio2f+0x250>
 8005940:	ee37 0a87 	vadd.f32	s0, s15, s14
 8005944:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005948:	ed80 0a00 	vstr	s0, [r0]
 800594c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005950:	f04f 30ff 	mov.w	r0, #4294967295
 8005954:	edc4 7a01 	vstr	s15, [r4, #4]
 8005958:	e7dd      	b.n	8005916 <__ieee754_rem_pio2f+0x5a>
 800595a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8005b10 <__ieee754_rem_pio2f+0x254>
 800595e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8005b14 <__ieee754_rem_pio2f+0x258>
 8005962:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005966:	ee77 6a87 	vadd.f32	s13, s15, s14
 800596a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800596e:	edc0 6a00 	vstr	s13, [r0]
 8005972:	e7eb      	b.n	800594c <__ieee754_rem_pio2f+0x90>
 8005974:	4b68      	ldr	r3, [pc, #416]	; (8005b18 <__ieee754_rem_pio2f+0x25c>)
 8005976:	429d      	cmp	r5, r3
 8005978:	dc72      	bgt.n	8005a60 <__ieee754_rem_pio2f+0x1a4>
 800597a:	f000 fc0d 	bl	8006198 <fabsf>
 800597e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8005b1c <__ieee754_rem_pio2f+0x260>
 8005982:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005986:	eee0 7a07 	vfma.f32	s15, s0, s14
 800598a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800598e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005992:	ee17 0a90 	vmov	r0, s15
 8005996:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8005b04 <__ieee754_rem_pio2f+0x248>
 800599a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800599e:	281f      	cmp	r0, #31
 80059a0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8005b0c <__ieee754_rem_pio2f+0x250>
 80059a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059a8:	eeb1 6a47 	vneg.f32	s12, s14
 80059ac:	ee70 6a67 	vsub.f32	s13, s0, s15
 80059b0:	ee16 2a90 	vmov	r2, s13
 80059b4:	dc1c      	bgt.n	80059f0 <__ieee754_rem_pio2f+0x134>
 80059b6:	495a      	ldr	r1, [pc, #360]	; (8005b20 <__ieee754_rem_pio2f+0x264>)
 80059b8:	1e47      	subs	r7, r0, #1
 80059ba:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80059be:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80059c2:	428b      	cmp	r3, r1
 80059c4:	d014      	beq.n	80059f0 <__ieee754_rem_pio2f+0x134>
 80059c6:	6022      	str	r2, [r4, #0]
 80059c8:	ed94 7a00 	vldr	s14, [r4]
 80059cc:	ee30 0a47 	vsub.f32	s0, s0, s14
 80059d0:	2e00      	cmp	r6, #0
 80059d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80059d6:	ed84 0a01 	vstr	s0, [r4, #4]
 80059da:	da9c      	bge.n	8005916 <__ieee754_rem_pio2f+0x5a>
 80059dc:	eeb1 7a47 	vneg.f32	s14, s14
 80059e0:	eeb1 0a40 	vneg.f32	s0, s0
 80059e4:	ed84 7a00 	vstr	s14, [r4]
 80059e8:	ed84 0a01 	vstr	s0, [r4, #4]
 80059ec:	4240      	negs	r0, r0
 80059ee:	e792      	b.n	8005916 <__ieee754_rem_pio2f+0x5a>
 80059f0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80059f4:	15eb      	asrs	r3, r5, #23
 80059f6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80059fa:	2d08      	cmp	r5, #8
 80059fc:	dde3      	ble.n	80059c6 <__ieee754_rem_pio2f+0x10a>
 80059fe:	eddf 7a44 	vldr	s15, [pc, #272]	; 8005b10 <__ieee754_rem_pio2f+0x254>
 8005a02:	eef0 6a40 	vmov.f32	s13, s0
 8005a06:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005a0a:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005a0e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8005a12:	eddf 7a40 	vldr	s15, [pc, #256]	; 8005b14 <__ieee754_rem_pio2f+0x258>
 8005a16:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8005a1a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8005a1e:	eef0 7a40 	vmov.f32	s15, s0
 8005a22:	ee15 2a90 	vmov	r2, s11
 8005a26:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005a2a:	1a5b      	subs	r3, r3, r1
 8005a2c:	2b19      	cmp	r3, #25
 8005a2e:	dc04      	bgt.n	8005a3a <__ieee754_rem_pio2f+0x17e>
 8005a30:	edc4 5a00 	vstr	s11, [r4]
 8005a34:	eeb0 0a66 	vmov.f32	s0, s13
 8005a38:	e7c6      	b.n	80059c8 <__ieee754_rem_pio2f+0x10c>
 8005a3a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8005b24 <__ieee754_rem_pio2f+0x268>
 8005a3e:	eeb0 0a66 	vmov.f32	s0, s13
 8005a42:	eea6 0a25 	vfma.f32	s0, s12, s11
 8005a46:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005a4a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005b28 <__ieee754_rem_pio2f+0x26c>
 8005a4e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005a52:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8005a56:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005a5a:	ed84 7a00 	vstr	s14, [r4]
 8005a5e:	e7b3      	b.n	80059c8 <__ieee754_rem_pio2f+0x10c>
 8005a60:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8005a64:	db06      	blt.n	8005a74 <__ieee754_rem_pio2f+0x1b8>
 8005a66:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005a6a:	edc0 7a01 	vstr	s15, [r0, #4]
 8005a6e:	edc0 7a00 	vstr	s15, [r0]
 8005a72:	e733      	b.n	80058dc <__ieee754_rem_pio2f+0x20>
 8005a74:	15ea      	asrs	r2, r5, #23
 8005a76:	3a86      	subs	r2, #134	; 0x86
 8005a78:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8005a7c:	ee07 3a90 	vmov	s15, r3
 8005a80:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005a84:	eddf 6a29 	vldr	s13, [pc, #164]	; 8005b2c <__ieee754_rem_pio2f+0x270>
 8005a88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005a8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a90:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005a94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005a98:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005a9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005aa0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005aa4:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005aa8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005aac:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab4:	edcd 7a05 	vstr	s15, [sp, #20]
 8005ab8:	d11e      	bne.n	8005af8 <__ieee754_rem_pio2f+0x23c>
 8005aba:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac2:	bf14      	ite	ne
 8005ac4:	2302      	movne	r3, #2
 8005ac6:	2301      	moveq	r3, #1
 8005ac8:	4919      	ldr	r1, [pc, #100]	; (8005b30 <__ieee754_rem_pio2f+0x274>)
 8005aca:	9101      	str	r1, [sp, #4]
 8005acc:	2102      	movs	r1, #2
 8005ace:	9100      	str	r1, [sp, #0]
 8005ad0:	a803      	add	r0, sp, #12
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	f000 f88e 	bl	8005bf4 <__kernel_rem_pio2f>
 8005ad8:	2e00      	cmp	r6, #0
 8005ada:	f6bf af1c 	bge.w	8005916 <__ieee754_rem_pio2f+0x5a>
 8005ade:	edd4 7a00 	vldr	s15, [r4]
 8005ae2:	eef1 7a67 	vneg.f32	s15, s15
 8005ae6:	edc4 7a00 	vstr	s15, [r4]
 8005aea:	edd4 7a01 	vldr	s15, [r4, #4]
 8005aee:	eef1 7a67 	vneg.f32	s15, s15
 8005af2:	edc4 7a01 	vstr	s15, [r4, #4]
 8005af6:	e779      	b.n	80059ec <__ieee754_rem_pio2f+0x130>
 8005af8:	2303      	movs	r3, #3
 8005afa:	e7e5      	b.n	8005ac8 <__ieee754_rem_pio2f+0x20c>
 8005afc:	3f490fd8 	.word	0x3f490fd8
 8005b00:	4016cbe3 	.word	0x4016cbe3
 8005b04:	3fc90f80 	.word	0x3fc90f80
 8005b08:	3fc90fd0 	.word	0x3fc90fd0
 8005b0c:	37354443 	.word	0x37354443
 8005b10:	37354400 	.word	0x37354400
 8005b14:	2e85a308 	.word	0x2e85a308
 8005b18:	43490f80 	.word	0x43490f80
 8005b1c:	3f22f984 	.word	0x3f22f984
 8005b20:	0800641c 	.word	0x0800641c
 8005b24:	2e85a300 	.word	0x2e85a300
 8005b28:	248d3132 	.word	0x248d3132
 8005b2c:	43800000 	.word	0x43800000
 8005b30:	0800649c 	.word	0x0800649c

08005b34 <__kernel_cosf>:
 8005b34:	ee10 3a10 	vmov	r3, s0
 8005b38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b3c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005b40:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005b44:	da05      	bge.n	8005b52 <__kernel_cosf+0x1e>
 8005b46:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005b4a:	ee17 2a90 	vmov	r2, s15
 8005b4e:	2a00      	cmp	r2, #0
 8005b50:	d03d      	beq.n	8005bce <__kernel_cosf+0x9a>
 8005b52:	ee60 5a00 	vmul.f32	s11, s0, s0
 8005b56:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005bd4 <__kernel_cosf+0xa0>
 8005b5a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005bd8 <__kernel_cosf+0xa4>
 8005b5e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8005bdc <__kernel_cosf+0xa8>
 8005b62:	4a1f      	ldr	r2, [pc, #124]	; (8005be0 <__kernel_cosf+0xac>)
 8005b64:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8005be4 <__kernel_cosf+0xb0>
 8005b6e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005b72:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005be8 <__kernel_cosf+0xb4>
 8005b76:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8005b7a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8005bec <__kernel_cosf+0xb8>
 8005b7e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005b82:	eeb0 7a66 	vmov.f32	s14, s13
 8005b86:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8005b8a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8005b8e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8005b92:	ee67 6a25 	vmul.f32	s13, s14, s11
 8005b96:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8005b9a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005b9e:	dc04      	bgt.n	8005baa <__kernel_cosf+0x76>
 8005ba0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005ba4:	ee36 0a47 	vsub.f32	s0, s12, s14
 8005ba8:	4770      	bx	lr
 8005baa:	4a11      	ldr	r2, [pc, #68]	; (8005bf0 <__kernel_cosf+0xbc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	bfda      	itte	le
 8005bb0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8005bb4:	ee06 3a90 	vmovle	s13, r3
 8005bb8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8005bbc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005bc0:	ee36 0a66 	vsub.f32	s0, s12, s13
 8005bc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005bc8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005bcc:	4770      	bx	lr
 8005bce:	eeb0 0a46 	vmov.f32	s0, s12
 8005bd2:	4770      	bx	lr
 8005bd4:	ad47d74e 	.word	0xad47d74e
 8005bd8:	310f74f6 	.word	0x310f74f6
 8005bdc:	3d2aaaab 	.word	0x3d2aaaab
 8005be0:	3e999999 	.word	0x3e999999
 8005be4:	b493f27c 	.word	0xb493f27c
 8005be8:	37d00d01 	.word	0x37d00d01
 8005bec:	bab60b61 	.word	0xbab60b61
 8005bf0:	3f480000 	.word	0x3f480000

08005bf4 <__kernel_rem_pio2f>:
 8005bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf8:	ed2d 8b04 	vpush	{d8-d9}
 8005bfc:	b0d7      	sub	sp, #348	; 0x15c
 8005bfe:	4616      	mov	r6, r2
 8005c00:	4698      	mov	r8, r3
 8005c02:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005c04:	4bbb      	ldr	r3, [pc, #748]	; (8005ef4 <__kernel_rem_pio2f+0x300>)
 8005c06:	9001      	str	r0, [sp, #4]
 8005c08:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8005c0c:	1d33      	adds	r3, r6, #4
 8005c0e:	460d      	mov	r5, r1
 8005c10:	f108 39ff 	add.w	r9, r8, #4294967295
 8005c14:	db29      	blt.n	8005c6a <__kernel_rem_pio2f+0x76>
 8005c16:	1ef1      	subs	r1, r6, #3
 8005c18:	bf48      	it	mi
 8005c1a:	1d31      	addmi	r1, r6, #4
 8005c1c:	10c9      	asrs	r1, r1, #3
 8005c1e:	1c4c      	adds	r4, r1, #1
 8005c20:	00e3      	lsls	r3, r4, #3
 8005c22:	9302      	str	r3, [sp, #8]
 8005c24:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8005c26:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8005f04 <__kernel_rem_pio2f+0x310>
 8005c2a:	eba1 0009 	sub.w	r0, r1, r9
 8005c2e:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8005c32:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8005c36:	eb07 0c09 	add.w	ip, r7, r9
 8005c3a:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8005c3e:	2300      	movs	r3, #0
 8005c40:	4563      	cmp	r3, ip
 8005c42:	dd14      	ble.n	8005c6e <__kernel_rem_pio2f+0x7a>
 8005c44:	ab1a      	add	r3, sp, #104	; 0x68
 8005c46:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8005c4a:	46cc      	mov	ip, r9
 8005c4c:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8005c50:	f1c8 0b01 	rsb	fp, r8, #1
 8005c54:	eb0b 020c 	add.w	r2, fp, ip
 8005c58:	4297      	cmp	r7, r2
 8005c5a:	db27      	blt.n	8005cac <__kernel_rem_pio2f+0xb8>
 8005c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005c60:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8005f04 <__kernel_rem_pio2f+0x310>
 8005c64:	4618      	mov	r0, r3
 8005c66:	2200      	movs	r2, #0
 8005c68:	e016      	b.n	8005c98 <__kernel_rem_pio2f+0xa4>
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	e7d7      	b.n	8005c1e <__kernel_rem_pio2f+0x2a>
 8005c6e:	42d8      	cmn	r0, r3
 8005c70:	bf5d      	ittte	pl
 8005c72:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8005c76:	ee07 2a90 	vmovpl	s15, r2
 8005c7a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005c7e:	eef0 7a47 	vmovmi.f32	s15, s14
 8005c82:	ecea 7a01 	vstmia	sl!, {s15}
 8005c86:	3301      	adds	r3, #1
 8005c88:	e7da      	b.n	8005c40 <__kernel_rem_pio2f+0x4c>
 8005c8a:	ecfe 6a01 	vldmia	lr!, {s13}
 8005c8e:	ed90 7a00 	vldr	s14, [r0]
 8005c92:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005c96:	3201      	adds	r2, #1
 8005c98:	454a      	cmp	r2, r9
 8005c9a:	f1a0 0004 	sub.w	r0, r0, #4
 8005c9e:	ddf4      	ble.n	8005c8a <__kernel_rem_pio2f+0x96>
 8005ca0:	ecea 7a01 	vstmia	sl!, {s15}
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	f10c 0c01 	add.w	ip, ip, #1
 8005caa:	e7d3      	b.n	8005c54 <__kernel_rem_pio2f+0x60>
 8005cac:	ab06      	add	r3, sp, #24
 8005cae:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8005cb2:	9304      	str	r3, [sp, #16]
 8005cb4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8005cb6:	eddf 8a92 	vldr	s17, [pc, #584]	; 8005f00 <__kernel_rem_pio2f+0x30c>
 8005cba:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8005efc <__kernel_rem_pio2f+0x308>
 8005cbe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005cc2:	9303      	str	r3, [sp, #12]
 8005cc4:	46ba      	mov	sl, r7
 8005cc6:	ab56      	add	r3, sp, #344	; 0x158
 8005cc8:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8005ccc:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8005cd0:	ab06      	add	r3, sp, #24
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	4652      	mov	r2, sl
 8005cd6:	2a00      	cmp	r2, #0
 8005cd8:	dc51      	bgt.n	8005d7e <__kernel_rem_pio2f+0x18a>
 8005cda:	4620      	mov	r0, r4
 8005cdc:	9305      	str	r3, [sp, #20]
 8005cde:	f000 faa5 	bl	800622c <scalbnf>
 8005ce2:	eeb0 8a40 	vmov.f32	s16, s0
 8005ce6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8005cea:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005cee:	f000 fa5b 	bl	80061a8 <floorf>
 8005cf2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8005cf6:	eea0 8a67 	vfms.f32	s16, s0, s15
 8005cfa:	2c00      	cmp	r4, #0
 8005cfc:	9b05      	ldr	r3, [sp, #20]
 8005cfe:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005d02:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8005d06:	edcd 7a00 	vstr	s15, [sp]
 8005d0a:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005d0e:	dd4b      	ble.n	8005da8 <__kernel_rem_pio2f+0x1b4>
 8005d10:	f10a 3cff 	add.w	ip, sl, #4294967295
 8005d14:	aa06      	add	r2, sp, #24
 8005d16:	f1c4 0e08 	rsb	lr, r4, #8
 8005d1a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8005d1e:	ee17 1a90 	vmov	r1, s15
 8005d22:	fa42 f00e 	asr.w	r0, r2, lr
 8005d26:	4401      	add	r1, r0
 8005d28:	9100      	str	r1, [sp, #0]
 8005d2a:	fa00 f00e 	lsl.w	r0, r0, lr
 8005d2e:	a906      	add	r1, sp, #24
 8005d30:	1a12      	subs	r2, r2, r0
 8005d32:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8005d36:	f1c4 0007 	rsb	r0, r4, #7
 8005d3a:	fa42 fb00 	asr.w	fp, r2, r0
 8005d3e:	f1bb 0f00 	cmp.w	fp, #0
 8005d42:	dd43      	ble.n	8005dcc <__kernel_rem_pio2f+0x1d8>
 8005d44:	9a00      	ldr	r2, [sp, #0]
 8005d46:	f04f 0e00 	mov.w	lr, #0
 8005d4a:	3201      	adds	r2, #1
 8005d4c:	9200      	str	r2, [sp, #0]
 8005d4e:	4670      	mov	r0, lr
 8005d50:	45f2      	cmp	sl, lr
 8005d52:	dc6c      	bgt.n	8005e2e <__kernel_rem_pio2f+0x23a>
 8005d54:	2c00      	cmp	r4, #0
 8005d56:	dd04      	ble.n	8005d62 <__kernel_rem_pio2f+0x16e>
 8005d58:	2c01      	cmp	r4, #1
 8005d5a:	d079      	beq.n	8005e50 <__kernel_rem_pio2f+0x25c>
 8005d5c:	2c02      	cmp	r4, #2
 8005d5e:	f000 8082 	beq.w	8005e66 <__kernel_rem_pio2f+0x272>
 8005d62:	f1bb 0f02 	cmp.w	fp, #2
 8005d66:	d131      	bne.n	8005dcc <__kernel_rem_pio2f+0x1d8>
 8005d68:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005d6c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005d70:	b360      	cbz	r0, 8005dcc <__kernel_rem_pio2f+0x1d8>
 8005d72:	4620      	mov	r0, r4
 8005d74:	f000 fa5a 	bl	800622c <scalbnf>
 8005d78:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005d7c:	e026      	b.n	8005dcc <__kernel_rem_pio2f+0x1d8>
 8005d7e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005d82:	3a01      	subs	r2, #1
 8005d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d88:	a942      	add	r1, sp, #264	; 0x108
 8005d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d8e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8005d92:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005d96:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005d9a:	eca0 0a01 	vstmia	r0!, {s0}
 8005d9e:	ed9c 0a00 	vldr	s0, [ip]
 8005da2:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005da6:	e796      	b.n	8005cd6 <__kernel_rem_pio2f+0xe2>
 8005da8:	d107      	bne.n	8005dba <__kernel_rem_pio2f+0x1c6>
 8005daa:	f10a 32ff 	add.w	r2, sl, #4294967295
 8005dae:	a906      	add	r1, sp, #24
 8005db0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005db4:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8005db8:	e7c1      	b.n	8005d3e <__kernel_rem_pio2f+0x14a>
 8005dba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005dbe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc6:	da2f      	bge.n	8005e28 <__kernel_rem_pio2f+0x234>
 8005dc8:	f04f 0b00 	mov.w	fp, #0
 8005dcc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd4:	f040 8098 	bne.w	8005f08 <__kernel_rem_pio2f+0x314>
 8005dd8:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005ddc:	469c      	mov	ip, r3
 8005dde:	2200      	movs	r2, #0
 8005de0:	45bc      	cmp	ip, r7
 8005de2:	da48      	bge.n	8005e76 <__kernel_rem_pio2f+0x282>
 8005de4:	2a00      	cmp	r2, #0
 8005de6:	d05f      	beq.n	8005ea8 <__kernel_rem_pio2f+0x2b4>
 8005de8:	aa06      	add	r2, sp, #24
 8005dea:	3c08      	subs	r4, #8
 8005dec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005df0:	2900      	cmp	r1, #0
 8005df2:	d07d      	beq.n	8005ef0 <__kernel_rem_pio2f+0x2fc>
 8005df4:	4620      	mov	r0, r4
 8005df6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005dfa:	9301      	str	r3, [sp, #4]
 8005dfc:	f000 fa16 	bl	800622c <scalbnf>
 8005e00:	9b01      	ldr	r3, [sp, #4]
 8005e02:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005f00 <__kernel_rem_pio2f+0x30c>
 8005e06:	4619      	mov	r1, r3
 8005e08:	2900      	cmp	r1, #0
 8005e0a:	f280 80af 	bge.w	8005f6c <__kernel_rem_pio2f+0x378>
 8005e0e:	4618      	mov	r0, r3
 8005e10:	2400      	movs	r4, #0
 8005e12:	2800      	cmp	r0, #0
 8005e14:	f2c0 80d0 	blt.w	8005fb8 <__kernel_rem_pio2f+0x3c4>
 8005e18:	a942      	add	r1, sp, #264	; 0x108
 8005e1a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8005e1e:	4a36      	ldr	r2, [pc, #216]	; (8005ef8 <__kernel_rem_pio2f+0x304>)
 8005e20:	eddf 7a38 	vldr	s15, [pc, #224]	; 8005f04 <__kernel_rem_pio2f+0x310>
 8005e24:	2100      	movs	r1, #0
 8005e26:	e0bb      	b.n	8005fa0 <__kernel_rem_pio2f+0x3ac>
 8005e28:	f04f 0b02 	mov.w	fp, #2
 8005e2c:	e78a      	b.n	8005d44 <__kernel_rem_pio2f+0x150>
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	b948      	cbnz	r0, 8005e46 <__kernel_rem_pio2f+0x252>
 8005e32:	b11a      	cbz	r2, 8005e3c <__kernel_rem_pio2f+0x248>
 8005e34:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f10e 0e01 	add.w	lr, lr, #1
 8005e40:	3304      	adds	r3, #4
 8005e42:	4610      	mov	r0, r2
 8005e44:	e784      	b.n	8005d50 <__kernel_rem_pio2f+0x15c>
 8005e46:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	e7f5      	b.n	8005e3c <__kernel_rem_pio2f+0x248>
 8005e50:	f10a 3cff 	add.w	ip, sl, #4294967295
 8005e54:	ab06      	add	r3, sp, #24
 8005e56:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8005e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e5e:	aa06      	add	r2, sp, #24
 8005e60:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8005e64:	e77d      	b.n	8005d62 <__kernel_rem_pio2f+0x16e>
 8005e66:	f10a 3cff 	add.w	ip, sl, #4294967295
 8005e6a:	ab06      	add	r3, sp, #24
 8005e6c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8005e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e74:	e7f3      	b.n	8005e5e <__kernel_rem_pio2f+0x26a>
 8005e76:	a906      	add	r1, sp, #24
 8005e78:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8005e7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005e80:	4302      	orrs	r2, r0
 8005e82:	e7ad      	b.n	8005de0 <__kernel_rem_pio2f+0x1ec>
 8005e84:	3001      	adds	r0, #1
 8005e86:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005e8a:	2a00      	cmp	r2, #0
 8005e8c:	d0fa      	beq.n	8005e84 <__kernel_rem_pio2f+0x290>
 8005e8e:	a91a      	add	r1, sp, #104	; 0x68
 8005e90:	eb0a 0208 	add.w	r2, sl, r8
 8005e94:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005e98:	f10a 0301 	add.w	r3, sl, #1
 8005e9c:	eb0a 0100 	add.w	r1, sl, r0
 8005ea0:	4299      	cmp	r1, r3
 8005ea2:	da04      	bge.n	8005eae <__kernel_rem_pio2f+0x2ba>
 8005ea4:	468a      	mov	sl, r1
 8005ea6:	e70e      	b.n	8005cc6 <__kernel_rem_pio2f+0xd2>
 8005ea8:	9b04      	ldr	r3, [sp, #16]
 8005eaa:	2001      	movs	r0, #1
 8005eac:	e7eb      	b.n	8005e86 <__kernel_rem_pio2f+0x292>
 8005eae:	9803      	ldr	r0, [sp, #12]
 8005eb0:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005eb4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005eb8:	9000      	str	r0, [sp, #0]
 8005eba:	ee07 0a90 	vmov	s15, r0
 8005ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ec2:	2000      	movs	r0, #0
 8005ec4:	ece2 7a01 	vstmia	r2!, {s15}
 8005ec8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8005f04 <__kernel_rem_pio2f+0x310>
 8005ecc:	4696      	mov	lr, r2
 8005ece:	4548      	cmp	r0, r9
 8005ed0:	dd06      	ble.n	8005ee0 <__kernel_rem_pio2f+0x2ec>
 8005ed2:	a842      	add	r0, sp, #264	; 0x108
 8005ed4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005ed8:	edc0 7a00 	vstr	s15, [r0]
 8005edc:	3301      	adds	r3, #1
 8005ede:	e7df      	b.n	8005ea0 <__kernel_rem_pio2f+0x2ac>
 8005ee0:	ecfc 6a01 	vldmia	ip!, {s13}
 8005ee4:	ed3e 7a01 	vldmdb	lr!, {s14}
 8005ee8:	3001      	adds	r0, #1
 8005eea:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005eee:	e7ee      	b.n	8005ece <__kernel_rem_pio2f+0x2da>
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	e779      	b.n	8005de8 <__kernel_rem_pio2f+0x1f4>
 8005ef4:	080067e0 	.word	0x080067e0
 8005ef8:	080067b4 	.word	0x080067b4
 8005efc:	43800000 	.word	0x43800000
 8005f00:	3b800000 	.word	0x3b800000
 8005f04:	00000000 	.word	0x00000000
 8005f08:	9b02      	ldr	r3, [sp, #8]
 8005f0a:	eeb0 0a48 	vmov.f32	s0, s16
 8005f0e:	1b98      	subs	r0, r3, r6
 8005f10:	f000 f98c 	bl	800622c <scalbnf>
 8005f14:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8005efc <__kernel_rem_pio2f+0x308>
 8005f18:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f20:	db1b      	blt.n	8005f5a <__kernel_rem_pio2f+0x366>
 8005f22:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8005f00 <__kernel_rem_pio2f+0x30c>
 8005f26:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005f2a:	aa06      	add	r2, sp, #24
 8005f2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f30:	a906      	add	r1, sp, #24
 8005f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f36:	3408      	adds	r4, #8
 8005f38:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f40:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005f44:	ee10 3a10 	vmov	r3, s0
 8005f48:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8005f4c:	ee17 2a90 	vmov	r2, s15
 8005f50:	f10a 0301 	add.w	r3, sl, #1
 8005f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005f58:	e74c      	b.n	8005df4 <__kernel_rem_pio2f+0x200>
 8005f5a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005f5e:	aa06      	add	r2, sp, #24
 8005f60:	ee10 3a10 	vmov	r3, s0
 8005f64:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8005f68:	4653      	mov	r3, sl
 8005f6a:	e743      	b.n	8005df4 <__kernel_rem_pio2f+0x200>
 8005f6c:	aa42      	add	r2, sp, #264	; 0x108
 8005f6e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8005f72:	aa06      	add	r2, sp, #24
 8005f74:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005f78:	9201      	str	r2, [sp, #4]
 8005f7a:	ee07 2a90 	vmov	s15, r2
 8005f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f82:	3901      	subs	r1, #1
 8005f84:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005f88:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005f8c:	edc0 7a00 	vstr	s15, [r0]
 8005f90:	e73a      	b.n	8005e08 <__kernel_rem_pio2f+0x214>
 8005f92:	ecf2 6a01 	vldmia	r2!, {s13}
 8005f96:	ecb6 7a01 	vldmia	r6!, {s14}
 8005f9a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005f9e:	3101      	adds	r1, #1
 8005fa0:	42b9      	cmp	r1, r7
 8005fa2:	dc01      	bgt.n	8005fa8 <__kernel_rem_pio2f+0x3b4>
 8005fa4:	428c      	cmp	r4, r1
 8005fa6:	daf4      	bge.n	8005f92 <__kernel_rem_pio2f+0x39e>
 8005fa8:	aa56      	add	r2, sp, #344	; 0x158
 8005faa:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8005fae:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8005fb2:	3801      	subs	r0, #1
 8005fb4:	3401      	adds	r4, #1
 8005fb6:	e72c      	b.n	8005e12 <__kernel_rem_pio2f+0x21e>
 8005fb8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005fba:	2a02      	cmp	r2, #2
 8005fbc:	dc0a      	bgt.n	8005fd4 <__kernel_rem_pio2f+0x3e0>
 8005fbe:	2a00      	cmp	r2, #0
 8005fc0:	dc61      	bgt.n	8006086 <__kernel_rem_pio2f+0x492>
 8005fc2:	d03c      	beq.n	800603e <__kernel_rem_pio2f+0x44a>
 8005fc4:	9b00      	ldr	r3, [sp, #0]
 8005fc6:	f003 0007 	and.w	r0, r3, #7
 8005fca:	b057      	add	sp, #348	; 0x15c
 8005fcc:	ecbd 8b04 	vpop	{d8-d9}
 8005fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005fd6:	2a03      	cmp	r2, #3
 8005fd8:	d1f4      	bne.n	8005fc4 <__kernel_rem_pio2f+0x3d0>
 8005fda:	aa2e      	add	r2, sp, #184	; 0xb8
 8005fdc:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005fe0:	4608      	mov	r0, r1
 8005fe2:	461c      	mov	r4, r3
 8005fe4:	2c00      	cmp	r4, #0
 8005fe6:	f1a0 0004 	sub.w	r0, r0, #4
 8005fea:	dc59      	bgt.n	80060a0 <__kernel_rem_pio2f+0x4ac>
 8005fec:	4618      	mov	r0, r3
 8005fee:	2801      	cmp	r0, #1
 8005ff0:	f1a1 0104 	sub.w	r1, r1, #4
 8005ff4:	dc64      	bgt.n	80060c0 <__kernel_rem_pio2f+0x4cc>
 8005ff6:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8005f04 <__kernel_rem_pio2f+0x310>
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	dc70      	bgt.n	80060e0 <__kernel_rem_pio2f+0x4ec>
 8005ffe:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8006002:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8006006:	f1bb 0f00 	cmp.w	fp, #0
 800600a:	d172      	bne.n	80060f2 <__kernel_rem_pio2f+0x4fe>
 800600c:	edc5 6a00 	vstr	s13, [r5]
 8006010:	ed85 7a01 	vstr	s14, [r5, #4]
 8006014:	edc5 7a02 	vstr	s15, [r5, #8]
 8006018:	e7d4      	b.n	8005fc4 <__kernel_rem_pio2f+0x3d0>
 800601a:	aa2e      	add	r2, sp, #184	; 0xb8
 800601c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8006020:	ed91 7a00 	vldr	s14, [r1]
 8006024:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006028:	3b01      	subs	r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	daf5      	bge.n	800601a <__kernel_rem_pio2f+0x426>
 800602e:	f1bb 0f00 	cmp.w	fp, #0
 8006032:	d001      	beq.n	8006038 <__kernel_rem_pio2f+0x444>
 8006034:	eef1 7a67 	vneg.f32	s15, s15
 8006038:	edc5 7a00 	vstr	s15, [r5]
 800603c:	e7c2      	b.n	8005fc4 <__kernel_rem_pio2f+0x3d0>
 800603e:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8005f04 <__kernel_rem_pio2f+0x310>
 8006042:	e7f2      	b.n	800602a <__kernel_rem_pio2f+0x436>
 8006044:	aa2e      	add	r2, sp, #184	; 0xb8
 8006046:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800604a:	edd0 7a00 	vldr	s15, [r0]
 800604e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006052:	3901      	subs	r1, #1
 8006054:	2900      	cmp	r1, #0
 8006056:	daf5      	bge.n	8006044 <__kernel_rem_pio2f+0x450>
 8006058:	f1bb 0f00 	cmp.w	fp, #0
 800605c:	d017      	beq.n	800608e <__kernel_rem_pio2f+0x49a>
 800605e:	eef1 7a47 	vneg.f32	s15, s14
 8006062:	edc5 7a00 	vstr	s15, [r5]
 8006066:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800606a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800606e:	a82f      	add	r0, sp, #188	; 0xbc
 8006070:	2101      	movs	r1, #1
 8006072:	428b      	cmp	r3, r1
 8006074:	da0e      	bge.n	8006094 <__kernel_rem_pio2f+0x4a0>
 8006076:	f1bb 0f00 	cmp.w	fp, #0
 800607a:	d001      	beq.n	8006080 <__kernel_rem_pio2f+0x48c>
 800607c:	eef1 7a67 	vneg.f32	s15, s15
 8006080:	edc5 7a01 	vstr	s15, [r5, #4]
 8006084:	e79e      	b.n	8005fc4 <__kernel_rem_pio2f+0x3d0>
 8006086:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8005f04 <__kernel_rem_pio2f+0x310>
 800608a:	4619      	mov	r1, r3
 800608c:	e7e2      	b.n	8006054 <__kernel_rem_pio2f+0x460>
 800608e:	eef0 7a47 	vmov.f32	s15, s14
 8006092:	e7e6      	b.n	8006062 <__kernel_rem_pio2f+0x46e>
 8006094:	ecb0 7a01 	vldmia	r0!, {s14}
 8006098:	3101      	adds	r1, #1
 800609a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800609e:	e7e8      	b.n	8006072 <__kernel_rem_pio2f+0x47e>
 80060a0:	edd0 7a00 	vldr	s15, [r0]
 80060a4:	edd0 6a01 	vldr	s13, [r0, #4]
 80060a8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80060ac:	3c01      	subs	r4, #1
 80060ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060b2:	ed80 7a00 	vstr	s14, [r0]
 80060b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ba:	edc0 7a01 	vstr	s15, [r0, #4]
 80060be:	e791      	b.n	8005fe4 <__kernel_rem_pio2f+0x3f0>
 80060c0:	edd1 7a00 	vldr	s15, [r1]
 80060c4:	edd1 6a01 	vldr	s13, [r1, #4]
 80060c8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80060cc:	3801      	subs	r0, #1
 80060ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060d2:	ed81 7a00 	vstr	s14, [r1]
 80060d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060da:	edc1 7a01 	vstr	s15, [r1, #4]
 80060de:	e786      	b.n	8005fee <__kernel_rem_pio2f+0x3fa>
 80060e0:	aa2e      	add	r2, sp, #184	; 0xb8
 80060e2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80060e6:	ed91 7a00 	vldr	s14, [r1]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060f0:	e783      	b.n	8005ffa <__kernel_rem_pio2f+0x406>
 80060f2:	eef1 6a66 	vneg.f32	s13, s13
 80060f6:	eeb1 7a47 	vneg.f32	s14, s14
 80060fa:	edc5 6a00 	vstr	s13, [r5]
 80060fe:	ed85 7a01 	vstr	s14, [r5, #4]
 8006102:	eef1 7a67 	vneg.f32	s15, s15
 8006106:	e785      	b.n	8006014 <__kernel_rem_pio2f+0x420>

08006108 <__kernel_sinf>:
 8006108:	ee10 3a10 	vmov	r3, s0
 800610c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006110:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8006114:	da04      	bge.n	8006120 <__kernel_sinf+0x18>
 8006116:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800611a:	ee17 3a90 	vmov	r3, s15
 800611e:	b35b      	cbz	r3, 8006178 <__kernel_sinf+0x70>
 8006120:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006124:	eddf 7a15 	vldr	s15, [pc, #84]	; 800617c <__kernel_sinf+0x74>
 8006128:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8006180 <__kernel_sinf+0x78>
 800612c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006130:	eddf 7a14 	vldr	s15, [pc, #80]	; 8006184 <__kernel_sinf+0x7c>
 8006134:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006138:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8006188 <__kernel_sinf+0x80>
 800613c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006140:	eddf 7a12 	vldr	s15, [pc, #72]	; 800618c <__kernel_sinf+0x84>
 8006144:	ee60 6a07 	vmul.f32	s13, s0, s14
 8006148:	eee6 7a07 	vfma.f32	s15, s12, s14
 800614c:	b930      	cbnz	r0, 800615c <__kernel_sinf+0x54>
 800614e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8006190 <__kernel_sinf+0x88>
 8006152:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006156:	eea6 0a26 	vfma.f32	s0, s12, s13
 800615a:	4770      	bx	lr
 800615c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006160:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8006164:	eee0 7a86 	vfma.f32	s15, s1, s12
 8006168:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800616c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8006194 <__kernel_sinf+0x8c>
 8006170:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8006174:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	2f2ec9d3 	.word	0x2f2ec9d3
 8006180:	b2d72f34 	.word	0xb2d72f34
 8006184:	3638ef1b 	.word	0x3638ef1b
 8006188:	b9500d01 	.word	0xb9500d01
 800618c:	3c088889 	.word	0x3c088889
 8006190:	be2aaaab 	.word	0xbe2aaaab
 8006194:	3e2aaaab 	.word	0x3e2aaaab

08006198 <fabsf>:
 8006198:	ee10 3a10 	vmov	r3, s0
 800619c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061a0:	ee00 3a10 	vmov	s0, r3
 80061a4:	4770      	bx	lr
	...

080061a8 <floorf>:
 80061a8:	ee10 3a10 	vmov	r3, s0
 80061ac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80061b0:	3a7f      	subs	r2, #127	; 0x7f
 80061b2:	2a16      	cmp	r2, #22
 80061b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80061b8:	dc2a      	bgt.n	8006210 <floorf+0x68>
 80061ba:	2a00      	cmp	r2, #0
 80061bc:	da11      	bge.n	80061e2 <floorf+0x3a>
 80061be:	eddf 7a18 	vldr	s15, [pc, #96]	; 8006220 <floorf+0x78>
 80061c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80061c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80061ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ce:	dd05      	ble.n	80061dc <floorf+0x34>
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	da23      	bge.n	800621c <floorf+0x74>
 80061d4:	4a13      	ldr	r2, [pc, #76]	; (8006224 <floorf+0x7c>)
 80061d6:	2900      	cmp	r1, #0
 80061d8:	bf18      	it	ne
 80061da:	4613      	movne	r3, r2
 80061dc:	ee00 3a10 	vmov	s0, r3
 80061e0:	4770      	bx	lr
 80061e2:	4911      	ldr	r1, [pc, #68]	; (8006228 <floorf+0x80>)
 80061e4:	4111      	asrs	r1, r2
 80061e6:	420b      	tst	r3, r1
 80061e8:	d0fa      	beq.n	80061e0 <floorf+0x38>
 80061ea:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006220 <floorf+0x78>
 80061ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 80061f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80061f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061fa:	ddef      	ble.n	80061dc <floorf+0x34>
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	bfbe      	ittt	lt
 8006200:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8006204:	fa40 f202 	asrlt.w	r2, r0, r2
 8006208:	189b      	addlt	r3, r3, r2
 800620a:	ea23 0301 	bic.w	r3, r3, r1
 800620e:	e7e5      	b.n	80061dc <floorf+0x34>
 8006210:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006214:	d3e4      	bcc.n	80061e0 <floorf+0x38>
 8006216:	ee30 0a00 	vadd.f32	s0, s0, s0
 800621a:	4770      	bx	lr
 800621c:	2300      	movs	r3, #0
 800621e:	e7dd      	b.n	80061dc <floorf+0x34>
 8006220:	7149f2ca 	.word	0x7149f2ca
 8006224:	bf800000 	.word	0xbf800000
 8006228:	007fffff 	.word	0x007fffff

0800622c <scalbnf>:
 800622c:	ee10 3a10 	vmov	r3, s0
 8006230:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006234:	d025      	beq.n	8006282 <scalbnf+0x56>
 8006236:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800623a:	d302      	bcc.n	8006242 <scalbnf+0x16>
 800623c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006240:	4770      	bx	lr
 8006242:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8006246:	d122      	bne.n	800628e <scalbnf+0x62>
 8006248:	4b2a      	ldr	r3, [pc, #168]	; (80062f4 <scalbnf+0xc8>)
 800624a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80062f8 <scalbnf+0xcc>
 800624e:	4298      	cmp	r0, r3
 8006250:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006254:	db16      	blt.n	8006284 <scalbnf+0x58>
 8006256:	ee10 3a10 	vmov	r3, s0
 800625a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800625e:	3a19      	subs	r2, #25
 8006260:	4402      	add	r2, r0
 8006262:	2afe      	cmp	r2, #254	; 0xfe
 8006264:	dd15      	ble.n	8006292 <scalbnf+0x66>
 8006266:	ee10 3a10 	vmov	r3, s0
 800626a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80062fc <scalbnf+0xd0>
 800626e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8006300 <scalbnf+0xd4>
 8006272:	2b00      	cmp	r3, #0
 8006274:	eeb0 7a67 	vmov.f32	s14, s15
 8006278:	bfb8      	it	lt
 800627a:	eef0 7a66 	vmovlt.f32	s15, s13
 800627e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8006282:	4770      	bx	lr
 8006284:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006304 <scalbnf+0xd8>
 8006288:	ee20 0a27 	vmul.f32	s0, s0, s15
 800628c:	4770      	bx	lr
 800628e:	0dd2      	lsrs	r2, r2, #23
 8006290:	e7e6      	b.n	8006260 <scalbnf+0x34>
 8006292:	2a00      	cmp	r2, #0
 8006294:	dd06      	ble.n	80062a4 <scalbnf+0x78>
 8006296:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800629a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800629e:	ee00 3a10 	vmov	s0, r3
 80062a2:	4770      	bx	lr
 80062a4:	f112 0f16 	cmn.w	r2, #22
 80062a8:	da1a      	bge.n	80062e0 <scalbnf+0xb4>
 80062aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80062ae:	4298      	cmp	r0, r3
 80062b0:	ee10 3a10 	vmov	r3, s0
 80062b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062b8:	dd0a      	ble.n	80062d0 <scalbnf+0xa4>
 80062ba:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80062fc <scalbnf+0xd0>
 80062be:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006300 <scalbnf+0xd4>
 80062c2:	eef0 7a40 	vmov.f32	s15, s0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	bf18      	it	ne
 80062ca:	eeb0 0a47 	vmovne.f32	s0, s14
 80062ce:	e7db      	b.n	8006288 <scalbnf+0x5c>
 80062d0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8006304 <scalbnf+0xd8>
 80062d4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006308 <scalbnf+0xdc>
 80062d8:	eef0 7a40 	vmov.f32	s15, s0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	e7f3      	b.n	80062c8 <scalbnf+0x9c>
 80062e0:	3219      	adds	r2, #25
 80062e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80062e6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80062ea:	eddf 7a08 	vldr	s15, [pc, #32]	; 800630c <scalbnf+0xe0>
 80062ee:	ee07 3a10 	vmov	s14, r3
 80062f2:	e7c4      	b.n	800627e <scalbnf+0x52>
 80062f4:	ffff3cb0 	.word	0xffff3cb0
 80062f8:	4c000000 	.word	0x4c000000
 80062fc:	7149f2ca 	.word	0x7149f2ca
 8006300:	f149f2ca 	.word	0xf149f2ca
 8006304:	0da24260 	.word	0x0da24260
 8006308:	8da24260 	.word	0x8da24260
 800630c:	33000000 	.word	0x33000000

08006310 <_init>:
 8006310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006312:	bf00      	nop
 8006314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006316:	bc08      	pop	{r3}
 8006318:	469e      	mov	lr, r3
 800631a:	4770      	bx	lr

0800631c <_fini>:
 800631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631e:	bf00      	nop
 8006320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006322:	bc08      	pop	{r3}
 8006324:	469e      	mov	lr, r3
 8006326:	4770      	bx	lr
